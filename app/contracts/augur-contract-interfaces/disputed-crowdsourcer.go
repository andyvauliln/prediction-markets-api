package augur-contract-interfaces

import (
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// DisputeCrowdsourcerABI is the input ABI used to generate the binding from.
const DisputeCrowdsourcerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"isInvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forkAndRedeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"liquidateLosing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETERNAL_APPROVAL_VALUE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDisavowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_payoutDistributionHash\",\"type\":\"bytes32\"},{\"name\":\"_payoutNumerators\",\"type\":\"uint256[]\"},{\"name\":\"_invalid\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redeemer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReputationToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controllerLookupName\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"getPayoutNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayoutDistributionHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFeeWindow\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]"

// DisputeCrowdsourcerBin is the compiled bytecode used for deploying new contracts.
const DisputeCrowdsourcerBin = `0x6080604052600b805460a060020a60ff021916905560008054600160a060020a0319163317905561291e806100356000396000f3006080604052600436106101505763ffffffff60e060020a60003504166304be2f508114610155578063095ea7b31461017e57806318160ddd146101a25780631d7b6d58146101c957806322b152a3146101de57806323b872dd146101f35780633018205f1461021d578063634eaff11461024e5780636402084214610263578063661884631461027857806370a082311461029c5780638418cd99146102bd5780638fb14061146102e15780638fd3ab801461035257806392eefe9b1461036757806395a2251f14610388578063a9059cbb146103a9578063b80907f2146103cd578063bef72fa2146103e2578063d73dd623146103f7578063da834ac41461041b578063dd62ed3e14610433578063dd62f6f31461045a578063de8fa4311461046f578063ee89dab414610484578063f1be167914610499578063f77f29b1146104ae578063fc0e3d90146104c3575b600080fd5b34801561016157600080fd5b5061016a6104d8565b604080519115158252519081900360200190f35b34801561018a57600080fd5b5061016a600160a060020a03600435166024356104e2565b3480156101ae57600080fd5b506101b76104fb565b60408051918252519081900360200190f35b3480156101d557600080fd5b5061016a610501565b3480156101ea57600080fd5b5061016a61051d565b3480156101ff57600080fd5b5061016a600160a060020a0360043581169060243516604435610810565b34801561022957600080fd5b50610232610889565b60408051600160a060020a039092168252519081900360200190f35b34801561025a57600080fd5b506101b7610898565b34801561026f57600080fd5b5061016a61089e565b34801561028457600080fd5b5061016a600160a060020a0360043516602435610956565b3480156102a857600080fd5b506101b7600160a060020a03600435166109ba565b3480156102c957600080fd5b506101b7600160a060020a03600435166024356109d5565b3480156102ed57600080fd5b50604080516064356004818101356020818102858101820190965281855261016a95600160a060020a03843516956024803596604435963696909560849592909301929091829185019084908082843750949750505050913515159250610c05915050565b34801561035e57600080fd5b5061016a610f27565b34801561037357600080fd5b5061016a600160a060020a0360043516611185565b34801561039457600080fd5b5061016a600160a060020a03600435166111c2565b3480156103b557600080fd5b5061016a600160a060020a0360043516602435611788565b3480156103d957600080fd5b5061023261179c565b3480156103ee57600080fd5b506101b76117ab565b34801561040357600080fd5b5061016a600160a060020a03600435166024356117b1565b34801561042757600080fd5b506101b76004356117ed565b34801561043f57600080fd5b506101b7600160a060020a0360043581169060243516611810565b34801561046657600080fd5b506101b761183b565b34801561047b57600080fd5b506101b7611841565b34801561049057600080fd5b5061016a611847565b3480156104a557600080fd5b50610232611868565b3480156104ba57600080fd5b5061023261187c565b3480156104cf57600080fd5b506101b761188b565b60055460ff165b90565b60006104ef338484611895565b50600190505b92915050565b60025490565b600061050b611900565b50610515336111c2565b506001905090565b60055460009081906101009004600160a060020a0316331461053e57600080fd5b61054661183b565b60001916600560019054906101000a9004600160a060020a0316600160a060020a03166382100be66040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561059d57600080fd5b505af11580156105b1573d6000803e3d6000fd5b505050506040513d60208110156105c757600080fd5b5051148015906106655750600554604080517f82100be600000000000000000000000000000000000000000000000000000000815290516000926101009004600160a060020a0316916382100be691600480830192602092919082900301818787803b15801561063657600080fd5b505af115801561064a573d6000803e3d6000fd5b505050506040513d602081101561066057600080fd5b505114155b151561067057600080fd5b600560019054906101000a9004600160a060020a0316600160a060020a031663b80907f26040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156106c357600080fd5b505af11580156106d7573d6000803e3d6000fd5b505050506040513d60208110156106ed57600080fd5b5051600554604080516000805160206128d383398151915281523060048201529051929350600160a060020a038085169363a9059cbb9361010090049091169184916370a08231916024808201926020929091908290030181600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506040513d602081101561078157600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b1580156107d057600080fd5b505af11580156107e4573d6000803e3d6000fd5b505050506040513d60208110156107fa57600080fd5b5051151561080757600080fd5b600191505b5090565b600160a060020a038316600090815260046020908152604080832033845290915281205460001981146108725761084d818463ffffffff611fbb16565b600160a060020a03861660009081526004602090815260408083203384529091529020555b61087d858585611fd0565b50600195945050505050565b600054600160a060020a031690565b60001981565b6005546000906101009004600160a060020a031615806109515750600554604080517ff76514c70000000000000000000000000000000000000000000000000000000081523060048201529051610100909204600160a060020a03169163f76514c7916024808201926020929091908290030181600087803b15801561092357600080fd5b505af1158015610937573d6000803e3d6000fd5b505050506040513d602081101561094d57600080fd5b5051155b905090565b336000908152600460209081526040808320600160a060020a0386168452909152812054808311156109945761098e33856000611895565b506109b0565b6109ae33856109a9848763ffffffff611fbb16565b611895565b505b5060019392505050565b600160a060020a031660009081526003602052604090205490565b6005546000906101009004600160a060020a031633146109f457600080fd5b610a1e610a11610a026104fb565b6006549063ffffffff611fbb16565b839063ffffffff61209b16565b9150811515610a2f575060006104f5565b600a54604080517fb873e9a7000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152306024830152604482018690529151919092169163b873e9a79160648083019260209291908290030181600087803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b505050506040513d6020811015610ace57600080fd5b5050600854604080517fa7eb685b000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163a7eb685b916024808201926020929091908290030181600087803b158015610b3757600080fd5b505af1158015610b4b573d6000803e3d6000fd5b505050506040513d6020811015610b6157600080fd5b50610b6e905083836120b2565b50610b776104fb565b600a54604080516000805160206128d383398151915281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610bcb57600080fd5b505af1158015610bdf573d6000803e3d6000fd5b505050506040513d6020811015610bf557600080fd5b50511015610bff57fe5b50919050565b600b5460009074010000000000000000000000000000000000000000900460ff1615610c3057600080fd5b610c38612153565b5085600560016101000a815481600160a060020a030219169083600160a060020a03160217905550600560019054906101000a9004600160a060020a0316600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b505050506040513d6020811015610cdd57600080fd5b5051600c8054600160a060020a031916600160a060020a03928316179055600554604080517fb80907f200000000000000000000000000000000000000000000000000000000815290516101009092049092169163b80907f29160048083019260209291908290030181600087803b158015610d5857600080fd5b505af1158015610d6c573d6000803e3d6000fd5b505050506040513d6020811015610d8257600080fd5b5051600a8054600160a060020a031916600160a060020a03928316179055600554604080517ff77f29b100000000000000000000000000000000000000000000000000000000815290516101009092049092169163f77f29b19160048083019260209291908290030181600087803b158015610dfd57600080fd5b505af1158015610e11573d6000803e3d6000fd5b505050506040513d6020811015610e2757600080fd5b505160088054600160a060020a031916600160a060020a03928316179055600554604080517fdf2a29da00000000000000000000000000000000000000000000000000000000815290516101009092049092169163df2a29da9160048083019260209291908290030181600087803b158015610ea257600080fd5b505af1158015610eb6573d6000803e3d6000fd5b505050506040513d6020811015610ecc57600080fd5b5051600b8054600160a060020a031916600160a060020a0390921691909117905560068590558251610f05906009906020860190612877565b505060078390556005805482151560ff19909116179055600195945050505050565b60055460009081906101009004600160a060020a03163314610f4857600080fd5b600860009054906101000a9004600160a060020a0316600160a060020a031663ca709a256040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f9b57600080fd5b505af1158015610faf573d6000803e3d6000fd5b505050506040513d6020811015610fc557600080fd5b5051604080516000805160206128d383398151915281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b505050506040513d602081101561104257600080fd5b5051600554604080517ff77f29b10000000000000000000000000000000000000000000000000000000081529051929350610100909104600160a060020a03169163f77f29b1916004808201926020929091908290030181600087803b1580156110ab57600080fd5b505af11580156110bf573d6000803e3d6000fd5b505050506040513d60208110156110d557600080fd5b505160088054600160a060020a031916600160a060020a039283161790819055604080517fa7eb685b000000000000000000000000000000000000000000000000000000008152600481018590529051919092169163a7eb685b9160248083019260209291908290030181600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d602081101561117b57600080fd5b5060019250505090565b60008054600160a060020a0316331461119d57600080fd5b5060008054600160a060020a038316600160a060020a03199091161790556001919050565b6000806000806000806000806111d661089e565b9650861580156112625750600560019054906101000a9004600160a060020a0316600160a060020a0316638d4e40836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d602081101561125e57600080fd5b5051155b156112e757600560019054906101000a9004600160a060020a0316600160a060020a0316634bb278f36040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156112ba57600080fd5b505af11580156112ce573d6000803e3d6000fd5b505050506040513d60208110156112e457600080fd5b50505b6112ef6121b9565b50600a54604080516000805160206128d383398151915281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561134457600080fd5b505af1158015611358573d6000803e3d6000fd5b505050506040513d602081101561136e57600080fd5b5051600b54604080516000805160206128d383398151915281523060048201529051929850600160a060020a03909116916370a08231916024808201926020929091908290030181600087803b1580156113c757600080fd5b505af11580156113db573d6000803e3d6000fd5b505050506040513d60208110156113f157600080fd5b505194506113fd6104fb565b600160a060020a038a16600090815260036020526040902054909450925061143b8461142f878663ffffffff61244516565b9063ffffffff61246c16565b91506114518461142f888663ffffffff61244516565b905061145d8984612483565b50600a54604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038c81166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156114cd57600080fd5b505af11580156114e1573d6000803e3d6000fd5b505050506040513d60208110156114f757600080fd5b5051151561150457600080fd5b60008211156115a957600b54604080517f1baffe38000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301526024820186905291519190921691631baffe389160448083019260209291908290030181600087803b15801561157c57600080fd5b505af1158015611590573d6000803e3d6000fd5b505050506040513d60208110156115a657600080fd5b50505b6000809054906101000a9004600160a060020a0316600160a060020a0316634e94c8296040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b505050506040513d602081101561162557600080fd5b8101908080519060200190929190505050600160a060020a03166306ba8e42600c60009054906101000a9004600160a060020a03168b600560019054906101000a9004600160a060020a031687868860096040518863ffffffff1660e060020a0281526004018088600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a0316815260200186600160a060020a0316600160a060020a0316815260200185815260200184815260200183815260200180602001828103825283818154815260200191508054801561172757602002820191906000526020600020905b815481526020019060010190808311611713575b505098505050505050505050602060405180830381600087803b15801561174d57600080fd5b505af1158015611761573d6000803e3d6000fd5b505050506040513d602081101561177757600080fd5b5060019a9950505050505050505050565b6000611795338484611fd0565b9392505050565b600a54600160a060020a031690565b60015481565b336000818152600460209081526040808320600160a060020a038716845290915281205490916104ef9185906109a9908663ffffffff61252416565b60006009828154811015156117fe57fe5b90600052602060002001549050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60075490565b60065490565b600b5474010000000000000000000000000000000000000000900460ff1690565b6005546101009004600160a060020a031690565b600854600160a060020a031690565b60006109516104fb565b600160a060020a03808416600081815260046020908152604080832094871680845294825280832086905580518681529051929493927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600080600080600560019054906101000a9004600160a060020a0316600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561195957600080fd5b505af115801561196d573d6000803e3d6000fd5b505050506040513d602081101561198357600080fd5b5051604080517fcb1d84180000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169163cb1d8418916004808201926020929091908290030181600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d6020811015611a0c57600080fd5b50516005546101009004600160a060020a03908116911614611a2d57600080fd5b600560019054906101000a9004600160a060020a0316600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a8057600080fd5b505af1158015611a94573d6000803e3d6000fd5b505050506040513d6020811015611aaa57600080fd5b5051600554604080517fdf428e3b00000000000000000000000000000000000000000000000000000000815260ff9092168015156024840152600483019182526009805460448501819052600160a060020a039095169463df428e3b94919391829160649091019085908015611b3f57602002820191906000526020600020905b815481526020019060010190808311611b2b575b50509350505050602060405180830381600087803b158015611b6057600080fd5b505af1158015611b74573d6000803e3d6000fd5b505050506040513d6020811015611b8a57600080fd5b5051604080517fb80907f20000000000000000000000000000000000000000000000000000000081529051919450600160a060020a0385169163b80907f2916004808201926020929091908290030181600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b505050506040513d6020811015611c1557600080fd5b50519150611c216121b9565b50600a54604080516000805160206128d383398151915281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015611c7657600080fd5b505af1158015611c8a573d6000803e3d6000fd5b505050506040513d6020811015611ca057600080fd5b5051600a54604080517f6e7ce591000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152602482018590529151939450911691636e7ce591916044808201926020929091908290030181600087803b158015611d1357600080fd5b505af1158015611d27573d6000803e3d6000fd5b505050506040513d6020811015611d3d57600080fd5b5050600654604080517fdb054134000000000000000000000000000000000000000000000000000000008152600481019290925251600160a060020a0384169163db0541349160248083019260209291908290030181600087803b158015611da457600080fd5b505af1158015611db8573d6000803e3d6000fd5b505050506040513d6020811015611dce57600080fd5b5050600a8054600160a060020a031916600160a060020a038481169190911790915560008054604080517f4e94c82900000000000000000000000000000000000000000000000000000000815290519190931692634e94c8299260048083019360209390929083900390910190829087803b158015611e4c57600080fd5b505af1158015611e60573d6000803e3d6000fd5b505050506040513d6020811015611e7657600080fd5b5051600554604080517f870c426d0000000000000000000000000000000000000000000000000000000081529051600160a060020a03938416936317570e80936101009004169163870c426d9160048083019260209291908290030181600087803b158015611ee457600080fd5b505af1158015611ef8573d6000803e3d6000fd5b505050506040513d6020811015611f0e57600080fd5b50516005546040805163ffffffff851660e060020a028152600160a060020a0393841660048201526101009092049092166024820152905160448083019260209291908290030181600087803b158015611f6757600080fd5b505af1158015611f7b573d6000803e3d6000fd5b505050506040513d6020811015611f9157600080fd5b50506005805474ffffffffffffffffffffffffffffffffffffffff00191690556001935050505090565b600082821115611fca57600080fd5b50900390565b600160a060020a038316600090815260036020526040812054611ff9908363ffffffff611fbb16565b600160a060020a03808616600090815260036020526040808220939093559085168152205461202e908363ffffffff61252416565b600160a060020a0380851660008181526003602090815260409182902094909455805186815290519193928816927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3612090848484612536565b506001949350505050565b60008183116120ab5750816104f5565b50806104f5565b600160a060020a0382166000908152600360205260408120546120db908363ffffffff61252416565b600160a060020a038416600090815260036020526040902055600254612107908363ffffffff61252416565b600255604080518381529051600160a060020a038516917f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885919081900360200190a26104ef838361265f565b600b5460009074010000000000000000000000000000000000000000900460ff161561217e57600080fd5b50600b805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600190565b600854604080517f870c426d0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316918391839163870c426d91600480830192602092919082900301818787803b15801561221c57600080fd5b505af1158015612230573d6000803e3d6000fd5b505050506040513d602081101561224657600080fd5b505190505b600082600160a060020a031663ca709a256040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561228b57600080fd5b505af115801561229f573d6000803e3d6000fd5b505050506040513d60208110156122b557600080fd5b5051604080516000805160206128d383398151915281523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561230857600080fd5b505af115801561231c573d6000803e3d6000fd5b505050506040513d602081101561233257600080fd5b5051111561243c5781600160a060020a031663b97a6c126040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561237857600080fd5b505af115801561238c573d6000803e3d6000fd5b505050506040513d60208110156123a257600080fd5b5050604080517fe487c7a5000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015291519183169163e487c7a5916024808201926020929091908290030181600087803b15801561240957600080fd5b505af115801561241d573d6000803e3d6000fd5b505050506040513d602081101561243357600080fd5b5051915061224b565b60019250505090565b6000828202831580612461575082848281151561245e57fe5b04145b151561179557600080fd5b600080828481151561247a57fe5b04949350505050565b600160a060020a0382166000908152600360205260408120546124ac908363ffffffff611fbb16565b600160a060020a0384166000908152600360205260409020556002546124d8908363ffffffff611fbb16565b600255604080518381529051600160a060020a038516917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a26104ef8383612780565b60008282018381101561179557600080fd5b60008060009054906101000a9004600160a060020a0316600160a060020a0316634e94c8296040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561258a57600080fd5b505af115801561259e573d6000803e3d6000fd5b505050506040513d60208110156125b457600080fd5b5051600c54604080517f50bd5cb9000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201528783166024820152868316604482015260648101869052905191909216916350bd5cb99160848083019260209291908290030181600087803b15801561263557600080fd5b505af1158015612649573d6000803e3d6000fd5b505050506040513d602081101561087d57600080fd5b60008060009054906101000a9004600160a060020a0316600160a060020a0316634e94c8296040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156126b357600080fd5b505af11580156126c7573d6000803e3d6000fd5b505050506040513d60208110156126dd57600080fd5b5051600c54604080517fb14823e1000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201528683166024820152604481018690529051919092169163b14823e19160648083019260209291908290030181600087803b15801561275657600080fd5b505af115801561276a573d6000803e3d6000fd5b505050506040513d60208110156109ae57600080fd5b60008060009054906101000a9004600160a060020a0316600160a060020a0316634e94c8296040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156127d457600080fd5b505af11580156127e8573d6000803e3d6000fd5b505050506040513d60208110156127fe57600080fd5b5051600c54604080517f10561361000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201528683166024820152604481018690529051919092169163105613619160648083019260209291908290030181600087803b15801561275657600080fd5b8280548282559060005260206000209081019282156128b2579160200282015b828111156128b2578251825591602001919060010190612897565b5061080c926104df9250905b8082111561080c57600081556001016128be560070a0823100000000000000000000000000000000000000000000000000000000a165627a7a72305820a99b89c505896011d7c2c52c6a35f7eb0f37f040e461b054fe26787842a73e020029`

// DeployDisputeCrowdsourcer deploys a new Ethereum contract, binding an instance of DisputeCrowdsourcer to it.
func DeployDisputeCrowdsourcer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DisputeCrowdsourcer, error) {
	parsed, err := abi.JSON(strings.NewReader(DisputeCrowdsourcerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DisputeCrowdsourcerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DisputeCrowdsourcer{DisputeCrowdsourcerCaller: DisputeCrowdsourcerCaller{contract: contract}, DisputeCrowdsourcerTransactor: DisputeCrowdsourcerTransactor{contract: contract}, DisputeCrowdsourcerFilterer: DisputeCrowdsourcerFilterer{contract: contract}}, nil
}

// DisputeCrowdsourcer is an auto generated Go binding around an Ethereum contract.
type DisputeCrowdsourcer struct {
	DisputeCrowdsourcerCaller     // Read-only binding to the contract
	DisputeCrowdsourcerTransactor // Write-only binding to the contract
	DisputeCrowdsourcerFilterer   // Log filterer for contract events
}

// DisputeCrowdsourcerCaller is an auto generated read-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DisputeCrowdsourcerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DisputeCrowdsourcerSession struct {
	Contract     *DisputeCrowdsourcer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// DisputeCrowdsourcerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DisputeCrowdsourcerCallerSession struct {
	Contract *DisputeCrowdsourcerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// DisputeCrowdsourcerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DisputeCrowdsourcerTransactorSession struct {
	Contract     *DisputeCrowdsourcerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// DisputeCrowdsourcerRaw is an auto generated low-level Go binding around an Ethereum contract.
type DisputeCrowdsourcerRaw struct {
	Contract *DisputeCrowdsourcer // Generic contract binding to access the raw methods on
}

// DisputeCrowdsourcerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerCallerRaw struct {
	Contract *DisputeCrowdsourcerCaller // Generic read-only contract binding to access the raw methods on
}

// DisputeCrowdsourcerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerTransactorRaw struct {
	Contract *DisputeCrowdsourcerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDisputeCrowdsourcer creates a new instance of DisputeCrowdsourcer, bound to a specific deployed contract.
func NewDisputeCrowdsourcer(address common.Address, backend bind.ContractBackend) (*DisputeCrowdsourcer, error) {
	contract, err := bindDisputeCrowdsourcer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcer{DisputeCrowdsourcerCaller: DisputeCrowdsourcerCaller{contract: contract}, DisputeCrowdsourcerTransactor: DisputeCrowdsourcerTransactor{contract: contract}, DisputeCrowdsourcerFilterer: DisputeCrowdsourcerFilterer{contract: contract}}, nil
}

// NewDisputeCrowdsourcerCaller creates a new read-only instance of DisputeCrowdsourcer, bound to a specific deployed contract.
func NewDisputeCrowdsourcerCaller(address common.Address, caller bind.ContractCaller) (*DisputeCrowdsourcerCaller, error) {
	contract, err := bindDisputeCrowdsourcer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerCaller{contract: contract}, nil
}

// NewDisputeCrowdsourcerTransactor creates a new write-only instance of DisputeCrowdsourcer, bound to a specific deployed contract.
func NewDisputeCrowdsourcerTransactor(address common.Address, transactor bind.ContractTransactor) (*DisputeCrowdsourcerTransactor, error) {
	contract, err := bindDisputeCrowdsourcer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerTransactor{contract: contract}, nil
}

// NewDisputeCrowdsourcerFilterer creates a new log filterer instance of DisputeCrowdsourcer, bound to a specific deployed contract.
func NewDisputeCrowdsourcerFilterer(address common.Address, filterer bind.ContractFilterer) (*DisputeCrowdsourcerFilterer, error) {
	contract, err := bindDisputeCrowdsourcer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerFilterer{contract: contract}, nil
}

// bindDisputeCrowdsourcer binds a generic wrapper to an already deployed contract.
func bindDisputeCrowdsourcer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DisputeCrowdsourcerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DisputeCrowdsourcer.Contract.DisputeCrowdsourcerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.DisputeCrowdsourcerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.DisputeCrowdsourcerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DisputeCrowdsourcer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.contract.Transact(opts, method, params...)
}

// ETERNALAPPROVALVALUE is a free data retrieval call binding the contract method 0x634eaff1.
//
// Solidity: function ETERNAL_APPROVAL_VALUE() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) ETERNALAPPROVALVALUE(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "ETERNAL_APPROVAL_VALUE")
	return *ret0, err
}

// ETERNALAPPROVALVALUE is a free data retrieval call binding the contract method 0x634eaff1.
//
// Solidity: function ETERNAL_APPROVAL_VALUE() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) ETERNALAPPROVALVALUE() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.ETERNALAPPROVALVALUE(&_DisputeCrowdsourcer.CallOpts)
}

// ETERNALAPPROVALVALUE is a free data retrieval call binding the contract method 0x634eaff1.
//
// Solidity: function ETERNAL_APPROVAL_VALUE() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) ETERNALAPPROVALVALUE() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.ETERNALAPPROVALVALUE(&_DisputeCrowdsourcer.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(remaining uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) Allowance(opts *bind.CallOpts, _owner common.Address, _spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "allowance", _owner, _spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(remaining uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.Allowance(&_DisputeCrowdsourcer.CallOpts, _owner, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(remaining uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.Allowance(&_DisputeCrowdsourcer.CallOpts, _owner, _spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) BalanceOf(opts *bind.CallOpts, _owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "balanceOf", _owner)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.BalanceOf(&_DisputeCrowdsourcer.CallOpts, _owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_owner address) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) BalanceOf(_owner common.Address) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.BalanceOf(&_DisputeCrowdsourcer.CallOpts, _owner)
}

// ControllerLookupName is a free data retrieval call binding the contract method 0xbef72fa2.
//
// Solidity: function controllerLookupName() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) ControllerLookupName(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "controllerLookupName")
	return *ret0, err
}

// ControllerLookupName is a free data retrieval call binding the contract method 0xbef72fa2.
//
// Solidity: function controllerLookupName() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) ControllerLookupName() ([32]byte, error) {
	return _DisputeCrowdsourcer.Contract.ControllerLookupName(&_DisputeCrowdsourcer.CallOpts)
}

// ControllerLookupName is a free data retrieval call binding the contract method 0xbef72fa2.
//
// Solidity: function controllerLookupName() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) ControllerLookupName() ([32]byte, error) {
	return _DisputeCrowdsourcer.Contract.ControllerLookupName(&_DisputeCrowdsourcer.CallOpts)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetController(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getController")
	return *ret0, err
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetController() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetController(&_DisputeCrowdsourcer.CallOpts)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetController() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetController(&_DisputeCrowdsourcer.CallOpts)
}

// GetFeeWindow is a free data retrieval call binding the contract method 0xf77f29b1.
//
// Solidity: function getFeeWindow() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetFeeWindow(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getFeeWindow")
	return *ret0, err
}

// GetFeeWindow is a free data retrieval call binding the contract method 0xf77f29b1.
//
// Solidity: function getFeeWindow() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetFeeWindow() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetFeeWindow(&_DisputeCrowdsourcer.CallOpts)
}

// GetFeeWindow is a free data retrieval call binding the contract method 0xf77f29b1.
//
// Solidity: function getFeeWindow() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetFeeWindow() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetFeeWindow(&_DisputeCrowdsourcer.CallOpts)
}

// GetInitialized is a free data retrieval call binding the contract method 0xee89dab4.
//
// Solidity: function getInitialized() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetInitialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getInitialized")
	return *ret0, err
}

// GetInitialized is a free data retrieval call binding the contract method 0xee89dab4.
//
// Solidity: function getInitialized() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetInitialized() (bool, error) {
	return _DisputeCrowdsourcer.Contract.GetInitialized(&_DisputeCrowdsourcer.CallOpts)
}

// GetInitialized is a free data retrieval call binding the contract method 0xee89dab4.
//
// Solidity: function getInitialized() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetInitialized() (bool, error) {
	return _DisputeCrowdsourcer.Contract.GetInitialized(&_DisputeCrowdsourcer.CallOpts)
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetMarket(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getMarket")
	return *ret0, err
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetMarket() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetMarket(&_DisputeCrowdsourcer.CallOpts)
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetMarket() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetMarket(&_DisputeCrowdsourcer.CallOpts)
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetPayoutDistributionHash(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getPayoutDistributionHash")
	return *ret0, err
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetPayoutDistributionHash() ([32]byte, error) {
	return _DisputeCrowdsourcer.Contract.GetPayoutDistributionHash(&_DisputeCrowdsourcer.CallOpts)
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetPayoutDistributionHash() ([32]byte, error) {
	return _DisputeCrowdsourcer.Contract.GetPayoutDistributionHash(&_DisputeCrowdsourcer.CallOpts)
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetPayoutNumerator(opts *bind.CallOpts, _outcome *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getPayoutNumerator", _outcome)
	return *ret0, err
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetPayoutNumerator(_outcome *big.Int) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetPayoutNumerator(&_DisputeCrowdsourcer.CallOpts, _outcome)
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetPayoutNumerator(_outcome *big.Int) (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetPayoutNumerator(&_DisputeCrowdsourcer.CallOpts, _outcome)
}

// GetReputationToken is a free data retrieval call binding the contract method 0xb80907f2.
//
// Solidity: function getReputationToken() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetReputationToken(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getReputationToken")
	return *ret0, err
}

// GetReputationToken is a free data retrieval call binding the contract method 0xb80907f2.
//
// Solidity: function getReputationToken() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetReputationToken() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetReputationToken(&_DisputeCrowdsourcer.CallOpts)
}

// GetReputationToken is a free data retrieval call binding the contract method 0xb80907f2.
//
// Solidity: function getReputationToken() constant returns(address)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetReputationToken() (common.Address, error) {
	return _DisputeCrowdsourcer.Contract.GetReputationToken(&_DisputeCrowdsourcer.CallOpts)
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getSize")
	return *ret0, err
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetSize() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetSize(&_DisputeCrowdsourcer.CallOpts)
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetSize() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetSize(&_DisputeCrowdsourcer.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "getStake")
	return *ret0, err
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) GetStake() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetStake(&_DisputeCrowdsourcer.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) GetStake() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.GetStake(&_DisputeCrowdsourcer.CallOpts)
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) IsDisavowed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "isDisavowed")
	return *ret0, err
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) IsDisavowed() (bool, error) {
	return _DisputeCrowdsourcer.Contract.IsDisavowed(&_DisputeCrowdsourcer.CallOpts)
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) IsDisavowed() (bool, error) {
	return _DisputeCrowdsourcer.Contract.IsDisavowed(&_DisputeCrowdsourcer.CallOpts)
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) IsInvalid(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "isInvalid")
	return *ret0, err
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) IsInvalid() (bool, error) {
	return _DisputeCrowdsourcer.Contract.IsInvalid(&_DisputeCrowdsourcer.CallOpts)
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) IsInvalid() (bool, error) {
	return _DisputeCrowdsourcer.Contract.IsInvalid(&_DisputeCrowdsourcer.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _DisputeCrowdsourcer.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) TotalSupply() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.TotalSupply(&_DisputeCrowdsourcer.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerCallerSession) TotalSupply() (*big.Int, error) {
	return _DisputeCrowdsourcer.Contract.TotalSupply(&_DisputeCrowdsourcer.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "approve", _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Approve(&_DisputeCrowdsourcer.TransactOpts, _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Approve(&_DisputeCrowdsourcer.TransactOpts, _spender, _value)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Contribute(opts *bind.TransactOpts, _participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "contribute", _participant, _amount)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Contribute(_participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Contribute(&_DisputeCrowdsourcer.TransactOpts, _participant, _amount)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Contribute(_participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Contribute(&_DisputeCrowdsourcer.TransactOpts, _participant, _amount)
}

// DecreaseApproval is a paid mutator transaction binding the contract method 0x66188463.
//
// Solidity: function decreaseApproval(_spender address, _subtractedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) DecreaseApproval(opts *bind.TransactOpts, _spender common.Address, _subtractedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "decreaseApproval", _spender, _subtractedValue)
}

// DecreaseApproval is a paid mutator transaction binding the contract method 0x66188463.
//
// Solidity: function decreaseApproval(_spender address, _subtractedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) DecreaseApproval(_spender common.Address, _subtractedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.DecreaseApproval(&_DisputeCrowdsourcer.TransactOpts, _spender, _subtractedValue)
}

// DecreaseApproval is a paid mutator transaction binding the contract method 0x66188463.
//
// Solidity: function decreaseApproval(_spender address, _subtractedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) DecreaseApproval(_spender common.Address, _subtractedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.DecreaseApproval(&_DisputeCrowdsourcer.TransactOpts, _spender, _subtractedValue)
}

// ForkAndRedeem is a paid mutator transaction binding the contract method 0x1d7b6d58.
//
// Solidity: function forkAndRedeem() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) ForkAndRedeem(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "forkAndRedeem")
}

// ForkAndRedeem is a paid mutator transaction binding the contract method 0x1d7b6d58.
//
// Solidity: function forkAndRedeem() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) ForkAndRedeem() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.ForkAndRedeem(&_DisputeCrowdsourcer.TransactOpts)
}

// ForkAndRedeem is a paid mutator transaction binding the contract method 0x1d7b6d58.
//
// Solidity: function forkAndRedeem() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) ForkAndRedeem() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.ForkAndRedeem(&_DisputeCrowdsourcer.TransactOpts)
}

// IncreaseApproval is a paid mutator transaction binding the contract method 0xd73dd623.
//
// Solidity: function increaseApproval(_spender address, _addedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) IncreaseApproval(opts *bind.TransactOpts, _spender common.Address, _addedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "increaseApproval", _spender, _addedValue)
}

// IncreaseApproval is a paid mutator transaction binding the contract method 0xd73dd623.
//
// Solidity: function increaseApproval(_spender address, _addedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) IncreaseApproval(_spender common.Address, _addedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.IncreaseApproval(&_DisputeCrowdsourcer.TransactOpts, _spender, _addedValue)
}

// IncreaseApproval is a paid mutator transaction binding the contract method 0xd73dd623.
//
// Solidity: function increaseApproval(_spender address, _addedValue uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) IncreaseApproval(_spender common.Address, _addedValue *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.IncreaseApproval(&_DisputeCrowdsourcer.TransactOpts, _spender, _addedValue)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(_market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Initialize(opts *bind.TransactOpts, _market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "initialize", _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(_market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Initialize(_market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Initialize(&_DisputeCrowdsourcer.TransactOpts, _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(_market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Initialize(_market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Initialize(&_DisputeCrowdsourcer.TransactOpts, _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) LiquidateLosing(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "liquidateLosing")
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) LiquidateLosing() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.LiquidateLosing(&_DisputeCrowdsourcer.TransactOpts)
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) LiquidateLosing() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.LiquidateLosing(&_DisputeCrowdsourcer.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Migrate() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Migrate(&_DisputeCrowdsourcer.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Migrate() (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Migrate(&_DisputeCrowdsourcer.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Redeem(opts *bind.TransactOpts, _redeemer common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "redeem", _redeemer)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Redeem(_redeemer common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Redeem(&_DisputeCrowdsourcer.TransactOpts, _redeemer)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Redeem(_redeemer common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Redeem(&_DisputeCrowdsourcer.TransactOpts, _redeemer)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) SetController(opts *bind.TransactOpts, _controller common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "setController", _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.SetController(&_DisputeCrowdsourcer.TransactOpts, _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.SetController(&_DisputeCrowdsourcer.TransactOpts, _controller)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "transfer", _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Transfer(&_DisputeCrowdsourcer.TransactOpts, _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.Transfer(&_DisputeCrowdsourcer.TransactOpts, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.contract.Transact(opts, "transferFrom", _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.TransferFrom(&_DisputeCrowdsourcer.TransactOpts, _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _DisputeCrowdsourcer.Contract.TransferFrom(&_DisputeCrowdsourcer.TransactOpts, _from, _to, _value)
}

// DisputeCrowdsourcerApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerApprovalIterator struct {
	Event *DisputeCrowdsourcerApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DisputeCrowdsourcerApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DisputeCrowdsourcerApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DisputeCrowdsourcerApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DisputeCrowdsourcerApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DisputeCrowdsourcerApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DisputeCrowdsourcerApproval represents a Approval event raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DisputeCrowdsourcerApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerApprovalIterator{contract: _DisputeCrowdsourcer.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DisputeCrowdsourcerApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DisputeCrowdsourcerApproval)
				if err := _DisputeCrowdsourcer.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DisputeCrowdsourcerBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerBurnIterator struct {
	Event *DisputeCrowdsourcerBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DisputeCrowdsourcerBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DisputeCrowdsourcerBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DisputeCrowdsourcerBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DisputeCrowdsourcerBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DisputeCrowdsourcerBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DisputeCrowdsourcerBurn represents a Burn event raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerBurn struct {
	Target common.Address
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: e Burn(target indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) FilterBurn(opts *bind.FilterOpts, target []common.Address) (*DisputeCrowdsourcerBurnIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.FilterLogs(opts, "Burn", targetRule)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerBurnIterator{contract: _DisputeCrowdsourcer.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5.
//
// Solidity: e Burn(target indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *DisputeCrowdsourcerBurn, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.WatchLogs(opts, "Burn", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DisputeCrowdsourcerBurn)
				if err := _DisputeCrowdsourcer.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DisputeCrowdsourcerMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerMintIterator struct {
	Event *DisputeCrowdsourcerMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DisputeCrowdsourcerMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DisputeCrowdsourcerMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DisputeCrowdsourcerMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DisputeCrowdsourcerMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DisputeCrowdsourcerMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DisputeCrowdsourcerMint represents a Mint event raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerMint struct {
	Target common.Address
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: e Mint(target indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) FilterMint(opts *bind.FilterOpts, target []common.Address) (*DisputeCrowdsourcerMintIterator, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.FilterLogs(opts, "Mint", targetRule)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerMintIterator{contract: _DisputeCrowdsourcer.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885.
//
// Solidity: e Mint(target indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *DisputeCrowdsourcerMint, target []common.Address) (event.Subscription, error) {

	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.WatchLogs(opts, "Mint", targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DisputeCrowdsourcerMint)
				if err := _DisputeCrowdsourcer.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DisputeCrowdsourcerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerTransferIterator struct {
	Event *DisputeCrowdsourcerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DisputeCrowdsourcerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DisputeCrowdsourcerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DisputeCrowdsourcerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DisputeCrowdsourcerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DisputeCrowdsourcerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DisputeCrowdsourcerTransfer represents a Transfer event raised by the DisputeCrowdsourcer contract.
type DisputeCrowdsourcerTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DisputeCrowdsourcerTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerTransferIterator{contract: _DisputeCrowdsourcer.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_DisputeCrowdsourcer *DisputeCrowdsourcerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DisputeCrowdsourcerTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _DisputeCrowdsourcer.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DisputeCrowdsourcerTransfer)
				if err := _DisputeCrowdsourcer.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// DisputeCrowdsourcerFactoryABI is the input ABI used to generate the binding from.
const DisputeCrowdsourcerFactoryABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_payoutDistributionHash\",\"type\":\"bytes32\"},{\"name\":\"_payoutNumerators\",\"type\":\"uint256[]\"},{\"name\":\"_invalid\",\"type\":\"bool\"}],\"name\":\"createDisputeCrowdsourcer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// DisputeCrowdsourcerFactoryBin is the compiled bytecode used for deploying new contracts.
const DisputeCrowdsourcerFactoryBin = `0x608060405234801561001057600080fd5b506105ba806100206000396000f3006080604052600436106100405763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634b841ddf8114610045575b600080fd5b34801561005157600080fd5b5060408051602060046084358181013583810280860185019096528085526100ca95833573ffffffffffffffffffffffffffffffffffffffff90811696602480359092169660443596606435963696919560a49590910192829190850190849080828437509497505050509135151592506100f3915050565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080600088610101610276565b73ffffffffffffffffffffffffffffffffffffffff90911681527f4469737075746543726f7764736f7572636572000000000000000000000000006020820152604080519182900301906000f080158015610160573d6000803e3d6000fd5b506040517f8fb1406100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301908152602483018b9052604483018a9052871515608484015260a060648401908152895160a4850152895194965086955091851693638fb14061938d938d938d938d938d939160c4909101906020808701910280838360005b838110156102145781810151838201526020016101fc565b505050509050019650505050505050602060405180830381600087803b15801561023d57600080fd5b505af1158015610251573d6000803e3d6000fd5b505050506040513d602081101561026757600080fd5b50909998505050505050505050565b60405161030880610287833901905600608060405234801561001057600080fd5b506040516040806103088339810160405280516020909101516000805433600160a060020a03199182161716600160a060020a039093169290921782556001556102a890819061006090396000f3006080604052600436106100565763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633018205f811461014f57806392eefe9b1461018d578063bef72fa2146101cf575b60015460009015156100675761014c565b60008054600154604080517ff39ec1f700000000000000000000000000000000000000000000000000000000815260048101929092525173ffffffffffffffffffffffffffffffffffffffff9092169263f39ec1f7926024808401936020939083900390910190829087803b1580156100df57600080fd5b505af11580156100f3573d6000803e3d6000fd5b505050506040513d602081101561010957600080fd5b50516040805136601f8101601f191680830190935292935091600083376000803684865af4808015610147576040513d81016040523d6000823e3d81f35b600080fd5b50005b34801561015b57600080fd5b506101646101f6565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561019957600080fd5b506101bb73ffffffffffffffffffffffffffffffffffffffff60043516610212565b604080519115158252519081900360200190f35b3480156101db57600080fd5b506101e4610276565b60408051918252519081900360200190f35b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6000805473ffffffffffffffffffffffffffffffffffffffff16331461023757600080fd5b506000805473ffffffffffffffffffffffffffffffffffffffff831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b600154815600a165627a7a7230582017c3a6b57ac8bbc7fd5320cba2543fe371eb8726332cd58700252790e09cf2140029a165627a7a72305820ba7577793ec1c2362a078ea9548fa729fe1ba1da001cf556066c152948c9c5080029`

// DeployDisputeCrowdsourcerFactory deploys a new Ethereum contract, binding an instance of DisputeCrowdsourcerFactory to it.
func DeployDisputeCrowdsourcerFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DisputeCrowdsourcerFactory, error) {
	parsed, err := abi.JSON(strings.NewReader(DisputeCrowdsourcerFactoryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DisputeCrowdsourcerFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DisputeCrowdsourcerFactory{DisputeCrowdsourcerFactoryCaller: DisputeCrowdsourcerFactoryCaller{contract: contract}, DisputeCrowdsourcerFactoryTransactor: DisputeCrowdsourcerFactoryTransactor{contract: contract}, DisputeCrowdsourcerFactoryFilterer: DisputeCrowdsourcerFactoryFilterer{contract: contract}}, nil
}

// DisputeCrowdsourcerFactory is an auto generated Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactory struct {
	DisputeCrowdsourcerFactoryCaller     // Read-only binding to the contract
	DisputeCrowdsourcerFactoryTransactor // Write-only binding to the contract
	DisputeCrowdsourcerFactoryFilterer   // Log filterer for contract events
}

// DisputeCrowdsourcerFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DisputeCrowdsourcerFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DisputeCrowdsourcerFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DisputeCrowdsourcerFactorySession struct {
	Contract     *DisputeCrowdsourcerFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DisputeCrowdsourcerFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DisputeCrowdsourcerFactoryCallerSession struct {
	Contract *DisputeCrowdsourcerFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// DisputeCrowdsourcerFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DisputeCrowdsourcerFactoryTransactorSession struct {
	Contract     *DisputeCrowdsourcerFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// DisputeCrowdsourcerFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactoryRaw struct {
	Contract *DisputeCrowdsourcerFactory // Generic contract binding to access the raw methods on
}

// DisputeCrowdsourcerFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactoryCallerRaw struct {
	Contract *DisputeCrowdsourcerFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// DisputeCrowdsourcerFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DisputeCrowdsourcerFactoryTransactorRaw struct {
	Contract *DisputeCrowdsourcerFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDisputeCrowdsourcerFactory creates a new instance of DisputeCrowdsourcerFactory, bound to a specific deployed contract.
func NewDisputeCrowdsourcerFactory(address common.Address, backend bind.ContractBackend) (*DisputeCrowdsourcerFactory, error) {
	contract, err := bindDisputeCrowdsourcerFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerFactory{DisputeCrowdsourcerFactoryCaller: DisputeCrowdsourcerFactoryCaller{contract: contract}, DisputeCrowdsourcerFactoryTransactor: DisputeCrowdsourcerFactoryTransactor{contract: contract}, DisputeCrowdsourcerFactoryFilterer: DisputeCrowdsourcerFactoryFilterer{contract: contract}}, nil
}

// NewDisputeCrowdsourcerFactoryCaller creates a new read-only instance of DisputeCrowdsourcerFactory, bound to a specific deployed contract.
func NewDisputeCrowdsourcerFactoryCaller(address common.Address, caller bind.ContractCaller) (*DisputeCrowdsourcerFactoryCaller, error) {
	contract, err := bindDisputeCrowdsourcerFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerFactoryCaller{contract: contract}, nil
}

// NewDisputeCrowdsourcerFactoryTransactor creates a new write-only instance of DisputeCrowdsourcerFactory, bound to a specific deployed contract.
func NewDisputeCrowdsourcerFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*DisputeCrowdsourcerFactoryTransactor, error) {
	contract, err := bindDisputeCrowdsourcerFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerFactoryTransactor{contract: contract}, nil
}

// NewDisputeCrowdsourcerFactoryFilterer creates a new log filterer instance of DisputeCrowdsourcerFactory, bound to a specific deployed contract.
func NewDisputeCrowdsourcerFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*DisputeCrowdsourcerFactoryFilterer, error) {
	contract, err := bindDisputeCrowdsourcerFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DisputeCrowdsourcerFactoryFilterer{contract: contract}, nil
}

// bindDisputeCrowdsourcerFactory binds a generic wrapper to an already deployed contract.
func bindDisputeCrowdsourcerFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DisputeCrowdsourcerFactoryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DisputeCrowdsourcerFactory.Contract.DisputeCrowdsourcerFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.DisputeCrowdsourcerFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.DisputeCrowdsourcerFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _DisputeCrowdsourcerFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.contract.Transact(opts, method, params...)
}

// CreateDisputeCrowdsourcer is a paid mutator transaction binding the contract method 0x4b841ddf.
//
// Solidity: function createDisputeCrowdsourcer(_controller address, _market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(address)
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryTransactor) CreateDisputeCrowdsourcer(opts *bind.TransactOpts, _controller common.Address, _market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.contract.Transact(opts, "createDisputeCrowdsourcer", _controller, _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// CreateDisputeCrowdsourcer is a paid mutator transaction binding the contract method 0x4b841ddf.
//
// Solidity: function createDisputeCrowdsourcer(_controller address, _market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(address)
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactorySession) CreateDisputeCrowdsourcer(_controller common.Address, _market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.CreateDisputeCrowdsourcer(&_DisputeCrowdsourcerFactory.TransactOpts, _controller, _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// CreateDisputeCrowdsourcer is a paid mutator transaction binding the contract method 0x4b841ddf.
//
// Solidity: function createDisputeCrowdsourcer(_controller address, _market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(address)
func (_DisputeCrowdsourcerFactory *DisputeCrowdsourcerFactoryTransactorSession) CreateDisputeCrowdsourcer(_controller common.Address, _market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _DisputeCrowdsourcerFactory.Contract.CreateDisputeCrowdsourcer(&_DisputeCrowdsourcerFactory.TransactOpts, _controller, _market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// IDisputeCrowdsourcerABI is the input ABI used to generate the binding from.
const IDisputeCrowdsourcerABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"isInvalid\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"liquidateLosing\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDisavowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_participant\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"market\",\"type\":\"address\"},{\"name\":\"_size\",\"type\":\"uint256\"},{\"name\":\"_payoutDistributionHash\",\"type\":\"bytes32\"},{\"name\":\"_payoutNumerators\",\"type\":\"uint256[]\"},{\"name\":\"_invalid\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"migrate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_redeemer\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"getPayoutNumerator\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPayoutDistributionHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSize\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStake\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]"

// IDisputeCrowdsourcerBin is the compiled bytecode used for deploying new contracts.
const IDisputeCrowdsourcerBin = `0x`

// DeployIDisputeCrowdsourcer deploys a new Ethereum contract, binding an instance of IDisputeCrowdsourcer to it.
func DeployIDisputeCrowdsourcer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *IDisputeCrowdsourcer, error) {
	parsed, err := abi.JSON(strings.NewReader(IDisputeCrowdsourcerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IDisputeCrowdsourcerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IDisputeCrowdsourcer{IDisputeCrowdsourcerCaller: IDisputeCrowdsourcerCaller{contract: contract}, IDisputeCrowdsourcerTransactor: IDisputeCrowdsourcerTransactor{contract: contract}, IDisputeCrowdsourcerFilterer: IDisputeCrowdsourcerFilterer{contract: contract}}, nil
}

// IDisputeCrowdsourcer is an auto generated Go binding around an Ethereum contract.
type IDisputeCrowdsourcer struct {
	IDisputeCrowdsourcerCaller     // Read-only binding to the contract
	IDisputeCrowdsourcerTransactor // Write-only binding to the contract
	IDisputeCrowdsourcerFilterer   // Log filterer for contract events
}

// IDisputeCrowdsourcerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDisputeCrowdsourcerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDisputeCrowdsourcerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDisputeCrowdsourcerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDisputeCrowdsourcerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDisputeCrowdsourcerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDisputeCrowdsourcerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDisputeCrowdsourcerSession struct {
	Contract     *IDisputeCrowdsourcer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IDisputeCrowdsourcerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDisputeCrowdsourcerCallerSession struct {
	Contract *IDisputeCrowdsourcerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IDisputeCrowdsourcerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDisputeCrowdsourcerTransactorSession struct {
	Contract     *IDisputeCrowdsourcerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IDisputeCrowdsourcerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDisputeCrowdsourcerRaw struct {
	Contract *IDisputeCrowdsourcer // Generic contract binding to access the raw methods on
}

// IDisputeCrowdsourcerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDisputeCrowdsourcerCallerRaw struct {
	Contract *IDisputeCrowdsourcerCaller // Generic read-only contract binding to access the raw methods on
}

// IDisputeCrowdsourcerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDisputeCrowdsourcerTransactorRaw struct {
	Contract *IDisputeCrowdsourcerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDisputeCrowdsourcer creates a new instance of IDisputeCrowdsourcer, bound to a specific deployed contract.
func NewIDisputeCrowdsourcer(address common.Address, backend bind.ContractBackend) (*IDisputeCrowdsourcer, error) {
	contract, err := bindIDisputeCrowdsourcer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcer{IDisputeCrowdsourcerCaller: IDisputeCrowdsourcerCaller{contract: contract}, IDisputeCrowdsourcerTransactor: IDisputeCrowdsourcerTransactor{contract: contract}, IDisputeCrowdsourcerFilterer: IDisputeCrowdsourcerFilterer{contract: contract}}, nil
}

// NewIDisputeCrowdsourcerCaller creates a new read-only instance of IDisputeCrowdsourcer, bound to a specific deployed contract.
func NewIDisputeCrowdsourcerCaller(address common.Address, caller bind.ContractCaller) (*IDisputeCrowdsourcerCaller, error) {
	contract, err := bindIDisputeCrowdsourcer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcerCaller{contract: contract}, nil
}

// NewIDisputeCrowdsourcerTransactor creates a new write-only instance of IDisputeCrowdsourcer, bound to a specific deployed contract.
func NewIDisputeCrowdsourcerTransactor(address common.Address, transactor bind.ContractTransactor) (*IDisputeCrowdsourcerTransactor, error) {
	contract, err := bindIDisputeCrowdsourcer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcerTransactor{contract: contract}, nil
}

// NewIDisputeCrowdsourcerFilterer creates a new log filterer instance of IDisputeCrowdsourcer, bound to a specific deployed contract.
func NewIDisputeCrowdsourcerFilterer(address common.Address, filterer bind.ContractFilterer) (*IDisputeCrowdsourcerFilterer, error) {
	contract, err := bindIDisputeCrowdsourcer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcerFilterer{contract: contract}, nil
}

// bindIDisputeCrowdsourcer binds a generic wrapper to an already deployed contract.
func bindIDisputeCrowdsourcer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IDisputeCrowdsourcerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IDisputeCrowdsourcer.Contract.IDisputeCrowdsourcerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.IDisputeCrowdsourcerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.IDisputeCrowdsourcerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IDisputeCrowdsourcer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) Allowance(opts *bind.CallOpts, _owner common.Address, _spender common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "allowance", _owner, _spender)
	return *ret0, err
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.Allowance(&_IDisputeCrowdsourcer.CallOpts, _owner, _spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(_owner address, _spender address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) Allowance(_owner common.Address, _spender common.Address) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.Allowance(&_IDisputeCrowdsourcer.CallOpts, _owner, _spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_who address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) BalanceOf(opts *bind.CallOpts, _who common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "balanceOf", _who)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_who address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) BalanceOf(_who common.Address) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.BalanceOf(&_IDisputeCrowdsourcer.CallOpts, _who)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(_who address) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) BalanceOf(_who common.Address) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.BalanceOf(&_IDisputeCrowdsourcer.CallOpts, _who)
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) GetMarket(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "getMarket")
	return *ret0, err
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) GetMarket() (common.Address, error) {
	return _IDisputeCrowdsourcer.Contract.GetMarket(&_IDisputeCrowdsourcer.CallOpts)
}

// GetMarket is a free data retrieval call binding the contract method 0xf1be1679.
//
// Solidity: function getMarket() constant returns(address)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) GetMarket() (common.Address, error) {
	return _IDisputeCrowdsourcer.Contract.GetMarket(&_IDisputeCrowdsourcer.CallOpts)
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) GetPayoutDistributionHash(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "getPayoutDistributionHash")
	return *ret0, err
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) GetPayoutDistributionHash() ([32]byte, error) {
	return _IDisputeCrowdsourcer.Contract.GetPayoutDistributionHash(&_IDisputeCrowdsourcer.CallOpts)
}

// GetPayoutDistributionHash is a free data retrieval call binding the contract method 0xdd62f6f3.
//
// Solidity: function getPayoutDistributionHash() constant returns(bytes32)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) GetPayoutDistributionHash() ([32]byte, error) {
	return _IDisputeCrowdsourcer.Contract.GetPayoutDistributionHash(&_IDisputeCrowdsourcer.CallOpts)
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) GetPayoutNumerator(opts *bind.CallOpts, _outcome *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "getPayoutNumerator", _outcome)
	return *ret0, err
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) GetPayoutNumerator(_outcome *big.Int) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetPayoutNumerator(&_IDisputeCrowdsourcer.CallOpts, _outcome)
}

// GetPayoutNumerator is a free data retrieval call binding the contract method 0xda834ac4.
//
// Solidity: function getPayoutNumerator(_outcome uint256) constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) GetPayoutNumerator(_outcome *big.Int) (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetPayoutNumerator(&_IDisputeCrowdsourcer.CallOpts, _outcome)
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) GetSize(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "getSize")
	return *ret0, err
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) GetSize() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetSize(&_IDisputeCrowdsourcer.CallOpts)
}

// GetSize is a free data retrieval call binding the contract method 0xde8fa431.
//
// Solidity: function getSize() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) GetSize() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetSize(&_IDisputeCrowdsourcer.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) GetStake(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "getStake")
	return *ret0, err
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) GetStake() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetStake(&_IDisputeCrowdsourcer.CallOpts)
}

// GetStake is a free data retrieval call binding the contract method 0xfc0e3d90.
//
// Solidity: function getStake() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) GetStake() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.GetStake(&_IDisputeCrowdsourcer.CallOpts)
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) IsDisavowed(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "isDisavowed")
	return *ret0, err
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) IsDisavowed() (bool, error) {
	return _IDisputeCrowdsourcer.Contract.IsDisavowed(&_IDisputeCrowdsourcer.CallOpts)
}

// IsDisavowed is a free data retrieval call binding the contract method 0x64020842.
//
// Solidity: function isDisavowed() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) IsDisavowed() (bool, error) {
	return _IDisputeCrowdsourcer.Contract.IsDisavowed(&_IDisputeCrowdsourcer.CallOpts)
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) IsInvalid(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "isInvalid")
	return *ret0, err
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) IsInvalid() (bool, error) {
	return _IDisputeCrowdsourcer.Contract.IsInvalid(&_IDisputeCrowdsourcer.CallOpts)
}

// IsInvalid is a free data retrieval call binding the contract method 0x04be2f50.
//
// Solidity: function isInvalid() constant returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) IsInvalid() (bool, error) {
	return _IDisputeCrowdsourcer.Contract.IsInvalid(&_IDisputeCrowdsourcer.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _IDisputeCrowdsourcer.contract.Call(opts, out, "totalSupply")
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) TotalSupply() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.TotalSupply(&_IDisputeCrowdsourcer.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() constant returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerCallerSession) TotalSupply() (*big.Int, error) {
	return _IDisputeCrowdsourcer.Contract.TotalSupply(&_IDisputeCrowdsourcer.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "approve", _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Approve(&_IDisputeCrowdsourcer.TransactOpts, _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(_spender address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Approve(&_IDisputeCrowdsourcer.TransactOpts, _spender, _value)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Contribute(opts *bind.TransactOpts, _participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "contribute", _participant, _amount)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Contribute(_participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Contribute(&_IDisputeCrowdsourcer.TransactOpts, _participant, _amount)
}

// Contribute is a paid mutator transaction binding the contract method 0x8418cd99.
//
// Solidity: function contribute(_participant address, _amount uint256) returns(uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Contribute(_participant common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Contribute(&_IDisputeCrowdsourcer.TransactOpts, _participant, _amount)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Initialize(opts *bind.TransactOpts, market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "initialize", market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Initialize(market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Initialize(&_IDisputeCrowdsourcer.TransactOpts, market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// Initialize is a paid mutator transaction binding the contract method 0x8fb14061.
//
// Solidity: function initialize(market address, _size uint256, _payoutDistributionHash bytes32, _payoutNumerators uint256[], _invalid bool) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Initialize(market common.Address, _size *big.Int, _payoutDistributionHash [32]byte, _payoutNumerators []*big.Int, _invalid bool) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Initialize(&_IDisputeCrowdsourcer.TransactOpts, market, _size, _payoutDistributionHash, _payoutNumerators, _invalid)
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) LiquidateLosing(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "liquidateLosing")
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) LiquidateLosing() (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.LiquidateLosing(&_IDisputeCrowdsourcer.TransactOpts)
}

// LiquidateLosing is a paid mutator transaction binding the contract method 0x22b152a3.
//
// Solidity: function liquidateLosing() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) LiquidateLosing() (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.LiquidateLosing(&_IDisputeCrowdsourcer.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Migrate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "migrate")
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Migrate() (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Migrate(&_IDisputeCrowdsourcer.TransactOpts)
}

// Migrate is a paid mutator transaction binding the contract method 0x8fd3ab80.
//
// Solidity: function migrate() returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Migrate() (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Migrate(&_IDisputeCrowdsourcer.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Redeem(opts *bind.TransactOpts, _redeemer common.Address) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "redeem", _redeemer)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Redeem(_redeemer common.Address) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Redeem(&_IDisputeCrowdsourcer.TransactOpts, _redeemer)
}

// Redeem is a paid mutator transaction binding the contract method 0x95a2251f.
//
// Solidity: function redeem(_redeemer address) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Redeem(_redeemer common.Address) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Redeem(&_IDisputeCrowdsourcer.TransactOpts, _redeemer)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "transfer", _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Transfer(&_IDisputeCrowdsourcer.TransactOpts, _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(_to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.Transfer(&_IDisputeCrowdsourcer.TransactOpts, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.contract.Transact(opts, "transferFrom", _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.TransferFrom(&_IDisputeCrowdsourcer.TransactOpts, _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(_from address, _to address, _value uint256) returns(bool)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerTransactorSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _IDisputeCrowdsourcer.Contract.TransferFrom(&_IDisputeCrowdsourcer.TransactOpts, _from, _to, _value)
}

// IDisputeCrowdsourcerApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IDisputeCrowdsourcer contract.
type IDisputeCrowdsourcerApprovalIterator struct {
	Event *IDisputeCrowdsourcerApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IDisputeCrowdsourcerApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IDisputeCrowdsourcerApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IDisputeCrowdsourcerApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IDisputeCrowdsourcerApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IDisputeCrowdsourcerApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IDisputeCrowdsourcerApproval represents a Approval event raised by the IDisputeCrowdsourcer contract.
type IDisputeCrowdsourcerApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IDisputeCrowdsourcerApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IDisputeCrowdsourcer.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcerApprovalIterator{contract: _IDisputeCrowdsourcer.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: e Approval(owner indexed address, spender indexed address, value uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IDisputeCrowdsourcerApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IDisputeCrowdsourcer.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IDisputeCrowdsourcerApproval)
				if err := _IDisputeCrowdsourcer.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IDisputeCrowdsourcerTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IDisputeCrowdsourcer contract.
type IDisputeCrowdsourcerTransferIterator struct {
	Event *IDisputeCrowdsourcerTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IDisputeCrowdsourcerTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IDisputeCrowdsourcerTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IDisputeCrowdsourcerTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IDisputeCrowdsourcerTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IDisputeCrowdsourcerTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IDisputeCrowdsourcerTransfer represents a Transfer event raised by the IDisputeCrowdsourcer contract.
type IDisputeCrowdsourcerTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IDisputeCrowdsourcerTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IDisputeCrowdsourcer.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IDisputeCrowdsourcerTransferIterator{contract: _IDisputeCrowdsourcer.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: e Transfer(from indexed address, to indexed address, value uint256)
func (_IDisputeCrowdsourcer *IDisputeCrowdsourcerFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IDisputeCrowdsourcerTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IDisputeCrowdsourcer.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IDisputeCrowdsourcerTransfer)
				if err := _IDisputeCrowdsourcer.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
