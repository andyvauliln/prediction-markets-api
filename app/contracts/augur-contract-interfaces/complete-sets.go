package augur-contract-interfaces

import (
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// CompleteSetsABI is the input ABI used to generate the binding from.
const CompleteSetsABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicBuyCompleteSetsWithCash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellCompleteSets\",\"outputs\":[{\"name\":\"_creatorFee\",\"type\":\"uint256\"},{\"name\":\"_reportingFee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSellCompleteSetsWithCash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicBuyCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"publicSellCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// CompleteSetsBin is the compiled bytecode used for deploying new contracts.
const CompleteSetsBin = `0x608060405260008054600160a860020a031916331790556128f3806100256000396000f3006080604052600436106100745763ffffffff60e060020a6000350416632054279e81146100795780632bb66c48146100b15780633018205f146100f45780637d8ec2cf1461012557806392eefe9b14610149578063aa48db201461016a578063abb60c8014610194578063ad16158e146101ab575b600080fd5b34801561008557600080fd5b5061009d600160a060020a03600435166024356101cf565b604080519115158252519081900360200190f35b3480156100bd57600080fd5b506100db600160a060020a0360043581169060243516604435610687565b6040805192835260208301919091528051918290030190f35b34801561010057600080fd5b506101096110fd565b60408051600160a060020a039092168252519081900360200190f35b34801561013157600080fd5b5061009d600160a060020a036004351660243561110c565b34801561015557600080fd5b5061009d600160a060020a036004351661147c565b34801561017657600080fd5b5061009d600160a060020a03600435811690602435166044356114c6565b61009d600160a060020a0360043516602435611b5d565b3480156101b757600080fd5b5061009d600160a060020a0360043516602435612028565b600082600081600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561021257600080fd5b505af1158015610226573d6000803e3d6000fd5b505050506040513d602081101561023c57600080fd5b5051600080546040805160008051602061288883398151915281529051939450600160a060020a0390911692634e94c82992600480840193602093929083900390910190829087803b15801561029157600080fd5b505af11580156102a5573d6000803e3d6000fd5b505050506040513d60208110156102bb57600080fd5b5051604080516000805160206128a88339815191528152600160a060020a03848116600483015291519190921691638cfb8f219160248083019260209291908290030181600087803b15801561031057600080fd5b505af1158015610324573d6000803e3d6000fd5b505050506040513d602081101561033a57600080fd5b5051151561034757600080fd5b80600160a060020a0316639f7e1bf6836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156103a257600080fd5b505af11580156103b6573d6000803e3d6000fd5b505050506040513d60208110156103cc57600080fd5b505115156103d957600080fd5b604080517faa48db20000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0387166024820152604481018690529051309163aa48db209160648083019260209291908290030181600087803b15801561044757600080fd5b505af115801561045b573d6000803e3d6000fd5b505050506040513d602081101561047157600080fd5b5050600080546040805160008051602061288883398151915281529051600160a060020a0390921692634e94c829926004808401936020939083900390910190829087803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b505050506040513d60208110156104ec57600080fd5b50516040805160008051602061286883398151915281529051600160a060020a039283169263c509d0b2929089169163870c426d916004808201926020929091908290030181600087803b15801561054357600080fd5b505af1158015610557573d6000803e3d6000fd5b505050506040513d602081101561056d57600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a0392831660048201529189166024830152336044830152606482018890525160848083019260209291908290030181600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506040513d60208110156105f357600080fd5b5050604080517fa0695f240000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163a0695f249160048083019260209291908290030181600087803b15801561065057600080fd5b505af1158015610664573d6000803e3d6000fd5b505050506040513d602081101561067a57600080fd5b5060019695505050505050565b60008054604080517f3f08882f00000000000000000000000000000000000000000000000000000000815233600482015290518392839283928392839283928392600160a060020a031691633f08882f91602480830192602092919082900301818787803b1580156106f857600080fd5b505af115801561070c573d6000803e3d6000fd5b505050506040513d602081101561072257600080fd5b5051151561072f57600080fd5b60005474010000000000000000000000000000000000000000900460ff161561075757600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600160a060020a038b1615156107a157600080fd5b89600160a060020a03166327ce5b8c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156107df57600080fd5b505af11580156107f3573d6000803e3d6000fd5b505050506040513d602081101561080957600080fd5b5051604080517fdf2a29da0000000000000000000000000000000000000000000000000000000081529051919750600160a060020a038c169163df2a29da916004808201926020929091908290030181600087803b15801561086a57600080fd5b505af115801561087e573d6000803e3d6000fd5b505050506040513d602081101561089457600080fd5b5051604080517fbad84c9e000000000000000000000000000000000000000000000000000000008152905191965061093191600160a060020a038d169163bad84c9e9160048083019260209291908290030181600087803b1580156108f857600080fd5b505af115801561090c573d6000803e3d6000fd5b505050506040513d602081101561092257600080fd5b50518a9063ffffffff6123a116565b935089600160a060020a0316638d4e40836040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561097157600080fd5b505af1158015610985573d6000803e3d6000fd5b505050506040513d602081101561099b57600080fd5b50511515610a9e5789600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156109e157600080fd5b505af11580156109f5573d6000803e3d6000fd5b505050506040513d6020811015610a0b57600080fd5b5051604080517fb62418a1000000000000000000000000000000000000000000000000000000008152600481018790529051600160a060020a039092169163b62418a1916024808201926020929091908290030181600087803b158015610a7157600080fd5b505af1158015610a85573d6000803e3d6000fd5b505050506040513d6020811015610a9b57600080fd5b50505b89600160a060020a031663f8c52125856040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610ae757600080fd5b505af1158015610afb573d6000803e3d6000fd5b505050506040513d6020811015610b1157600080fd5b50516040805160008051602061286883398151915281529051919950600160a060020a038c169163870c426d916004808201926020929091908290030181600087803b158015610b6057600080fd5b505af1158015610b74573d6000803e3d6000fd5b505050506040513d6020811015610b8a57600080fd5b5051604080517f8f93bffe0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691638f93bffe916004808201926020929091908290030181600087803b158015610be957600080fd5b505af1158015610bfd573d6000803e3d6000fd5b505050506040513d6020811015610c1357600080fd5b50519250610c27848463ffffffff6123cf16565b9650610c4987610c3d868b63ffffffff6123e616565b9063ffffffff6123e616565b9350600091505b85821015610d705789600160a060020a03166365957bf5836040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b158015610ca157600080fd5b505af1158015610cb5573d6000803e3d6000fd5b505050506040513d6020811015610ccb57600080fd5b5051604080517fd333d7cf000000000000000000000000000000000000000000000000000000008152600160a060020a038e81166004830152602482018d90529151919092169163d333d7cf9160448083019260209291908290030181600087803b158015610d3957600080fd5b505af1158015610d4d573d6000803e3d6000fd5b505050506040513d6020811015610d6357600080fd5b5050600190910190610c50565b8715610e7c5784600160a060020a03166323b872dd8b8c600160a060020a031663ed23378b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610dc457600080fd5b505af1158015610dd8573d6000803e3d6000fd5b505050506040513d6020811015610dee57600080fd5b50516040805160e060020a63ffffffff8616028152600160a060020a039384166004820152929091166024830152604482018c90525160648083019260209291908290030181600087803b158015610e4557600080fd5b505af1158015610e59573d6000803e3d6000fd5b505050506040513d6020811015610e6f57600080fd5b50511515610e7c57600080fd5b86156110235789600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ec057600080fd5b505af1158015610ed4573d6000803e3d6000fd5b505050506040513d6020811015610eea57600080fd5b5051604080517f0cc8c9af0000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691630cc8c9af916004808201926020929091908290030181600087803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b505050506040513d6020811015610f7357600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038d811660048301528084166024830152604482018b90529151929350908716916323b872dd916064808201926020929091908290030181600087803b158015610fec57600080fd5b505af1158015611000573d6000803e3d6000fd5b505050506040513d602081101561101657600080fd5b5051151561102357600080fd5b604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a038c811660048301528d81166024830152604482018790529151918716916323b872dd916064808201926020929091908290030181600087803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b505050506040513d60208110156110c157600080fd5b505115156110ce57600080fd5b50506000805474ff00000000000000000000000000000000000000001916905550939792965091945050505050565b600054600160a060020a031690565b600082600081600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561114f57600080fd5b505af1158015611163573d6000803e3d6000fd5b505050506040513d602081101561117957600080fd5b5051600080546040805160008051602061288883398151915281529051939450600160a060020a0390911692634e94c82992600480840193602093929083900390910190829087803b1580156111ce57600080fd5b505af11580156111e2573d6000803e3d6000fd5b505050506040513d60208110156111f857600080fd5b5051604080516000805160206128a88339815191528152600160a060020a03848116600483015291519190921691638cfb8f219160248083019260209291908290030181600087803b15801561124d57600080fd5b505af1158015611261573d6000803e3d6000fd5b505050506040513d602081101561127757600080fd5b5051151561128457600080fd5b80600160a060020a0316639f7e1bf6836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156112df57600080fd5b505af11580156112f3573d6000803e3d6000fd5b505050506040513d602081101561130957600080fd5b5051151561131657600080fd5b604080517f2bb66c48000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03871660248201526044810186905281513092632bb66c4892606480820193918290030181600087803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b505050506040513d60408110156113aa57600080fd5b5050600080546040805160008051602061288883398151915281529051600160a060020a0390921692634e94c829926004808401936020939083900390910190829087803b1580156113fb57600080fd5b505af115801561140f573d6000803e3d6000fd5b505050506040513d602081101561142557600080fd5b50516040805160008051602061286883398151915281529051600160a060020a039283169263ed654fd7929089169163870c426d916004808201926020929091908290030181600087803b15801561054357600080fd5b60008054600160a060020a0316331461149457600080fd5b5060008054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff199091161790556001919050565b60008054604080517f3f08882f000000000000000000000000000000000000000000000000000000008152336004820152905183928392839283928392600160a060020a0390911691633f08882f9160248082019260209290919082900301818787803b15801561153657600080fd5b505af115801561154a573d6000803e3d6000fd5b505050506040513d602081101561156057600080fd5b5051151561156d57600080fd5b60005474010000000000000000000000000000000000000000900460ff161561159557600080fd5b6000805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000179055600160a060020a03891615156115df57600080fd5b87600160a060020a03166327ce5b8c6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050506040513d602081101561164757600080fd5b5051604080517fdf2a29da0000000000000000000000000000000000000000000000000000000081529051919650600160a060020a038a169163df2a29da916004808201926020929091908290030181600087803b1580156116a857600080fd5b505af11580156116bc573d6000803e3d6000fd5b505050506040513d60208110156116d257600080fd5b5051600080546040805160008051602061288883398151915281529051939750600160a060020a0390911692634e94c82992600480840193602093929083900390910190829087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d602081101561175157600080fd5b5051604080517fbad84c9e00000000000000000000000000000000000000000000000000000000815290519194506117ee91600160a060020a038b169163bad84c9e9160048083019260209291908290030181600087803b1580156117b557600080fd5b505af11580156117c9573d6000803e3d6000fd5b505050506040513d60208110156117df57600080fd5b5051889063ffffffff6123a116565b604080517fec238994000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528c811660248301528b811660448301526064820184905291519294509085169163ec238994916084808201926020929091908290030181600087803b15801561186d57600080fd5b505af1158015611881573d6000803e3d6000fd5b505050506040513d602081101561189757600080fd5b505115156118a457600080fd5b5060005b848110156119c55787600160a060020a03166365957bf5826040518263ffffffff1660e060020a02815260040180828152602001915050602060405180830381600087803b1580156118f957600080fd5b505af115801561190d573d6000803e3d6000fd5b505050506040513d602081101561192357600080fd5b5051604080517f0f9e5bbd000000000000000000000000000000000000000000000000000000008152600160a060020a038c81166004830152602482018b905291519190921691630f9e5bbd9160448083019260209291908290030181600087803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b50506001016118a8565b87600160a060020a0316638d4e40836040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a0357600080fd5b505af1158015611a17573d6000803e3d6000fd5b505050506040513d6020811015611a2d57600080fd5b50511515611b305787600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a7357600080fd5b505af1158015611a87573d6000803e3d6000fd5b505050506040513d6020811015611a9d57600080fd5b5051604080517fce483e88000000000000000000000000000000000000000000000000000000008152600481018590529051600160a060020a039092169163ce483e88916024808201926020929091908290030181600087803b158015611b0357600080fd5b505af1158015611b17573d6000803e3d6000fd5b505050506040513d6020811015611b2d57600080fd5b50505b50506000805474ff0000000000000000000000000000000000000000191690555060019695505050505050565b600082600081600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611ba057600080fd5b505af1158015611bb4573d6000803e3d6000fd5b505050506040513d6020811015611bca57600080fd5b5051600080546040805160008051602061288883398151915281529051939450600160a060020a0390911692634e94c82992600480840193602093929083900390910190829087803b158015611c1f57600080fd5b505af1158015611c33573d6000803e3d6000fd5b505050506040513d6020811015611c4957600080fd5b5051604080516000805160206128a88339815191528152600160a060020a03848116600483015291519190921691638cfb8f219160248083019260209291908290030181600087803b158015611c9e57600080fd5b505af1158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b50511515611cd557600080fd5b80600160a060020a0316639f7e1bf6836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015611d3057600080fd5b505af1158015611d44573d6000803e3d6000fd5b505050506040513d6020811015611d5a57600080fd5b50511515611d6757600080fd5b611d6f6123fb565b50604080517faa48db20000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0387166024820152604481018690529051309163aa48db209160648083019260209291908290030181600087803b158015611dde57600080fd5b505af1158015611df2573d6000803e3d6000fd5b505050506040513d6020811015611e0857600080fd5b5050600080546040805160008051602061288883398151915281529051600160a060020a0390921692634e94c829926004808401936020939083900390910190829087803b158015611e5957600080fd5b505af1158015611e6d573d6000803e3d6000fd5b505050506040513d6020811015611e8357600080fd5b50516040805160008051602061286883398151915281529051600160a060020a039283169263c509d0b2929089169163870c426d916004808201926020929091908290030181600087803b158015611eda57600080fd5b505af1158015611eee573d6000803e3d6000fd5b505050506040513d6020811015611f0457600080fd5b50516040805160e060020a63ffffffff8516028152600160a060020a0392831660048201529189166024830152336044830152606482018890525160848083019260209291908290030181600087803b158015611f6057600080fd5b505af1158015611f74573d6000803e3d6000fd5b505050506040513d6020811015611f8a57600080fd5b5050604080517fa0695f240000000000000000000000000000000000000000000000000000000081529051600160a060020a0387169163a0695f249160048083019260209291908290030181600087803b158015611fe757600080fd5b505af1158015611ffb573d6000803e3d6000fd5b505050506040513d602081101561201157600080fd5b50600193505061201f61254f565b50505092915050565b600082600081600160a060020a031663870c426d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561206b57600080fd5b505af115801561207f573d6000803e3d6000fd5b505050506040513d602081101561209557600080fd5b5051600080546040805160008051602061288883398151915281529051939450600160a060020a0390911692634e94c82992600480840193602093929083900390910190829087803b1580156120ea57600080fd5b505af11580156120fe573d6000803e3d6000fd5b505050506040513d602081101561211457600080fd5b5051604080516000805160206128a88339815191528152600160a060020a03848116600483015291519190921691638cfb8f219160248083019260209291908290030181600087803b15801561216957600080fd5b505af115801561217d573d6000803e3d6000fd5b505050506040513d602081101561219357600080fd5b505115156121a057600080fd5b80600160a060020a0316639f7e1bf6836040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b1580156121fb57600080fd5b505af115801561220f573d6000803e3d6000fd5b505050506040513d602081101561222557600080fd5b5051151561223257600080fd5b61223a6123fb565b50604080517f2bb66c48000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03871660248201526044810186905281513092632bb66c4892606480820193918290030181600087803b1580156122a557600080fd5b505af11580156122b9573d6000803e3d6000fd5b505050506040513d60408110156122cf57600080fd5b5050600080546040805160008051602061288883398151915281529051600160a060020a0390921692634e94c829926004808401936020939083900390910190829087803b15801561232057600080fd5b505af1158015612334573d6000803e3d6000fd5b505050506040513d602081101561234a57600080fd5b50516040805160008051602061286883398151915281529051600160a060020a039283169263ed654fd7929089169163870c426d916004808201926020929091908290030181600087803b158015611eda57600080fd5b60008282028315806123bd57508284828115156123ba57fe5b04145b15156123c857600080fd5b9392505050565b60008082848115156123dd57fe5b04949350505050565b6000828211156123f557600080fd5b50900390565b6000803411156125495760008054604080517ff39ec1f70000000000000000000000000000000000000000000000000000000081527f436173680000000000000000000000000000000000000000000000000000000060048201529051600160a060020a039092169263f39ec1f7926024808401936020939083900390910190829087803b15801561248c57600080fd5b505af11580156124a0573d6000803e3d6000fd5b505050506040513d60208110156124b657600080fd5b5051604080517f4faa8a260000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691634faa8a26913491602480830192602092919082900301818588803b15801561251b57600080fd5b505af115801561252f573d6000803e3d6000fd5b50505050506040513d602081101561254657600080fd5b50505b50600190565b60008054604080517ff39ec1f70000000000000000000000000000000000000000000000000000000081527f436173680000000000000000000000000000000000000000000000000000000060048201529051839283928392600160a060020a039092169163f39ec1f79160248082019260209290919082900301818787803b1580156125db57600080fd5b505af11580156125ef573d6000803e3d6000fd5b505050506040513d602081101561260557600080fd5b5051604080517f70a082310000000000000000000000000000000000000000000000000000000081523360048201529051919450600160a060020a038516916370a08231916024808201926020929091908290030181600087803b15801561266c57600080fd5b505af1158015612680573d6000803e3d6000fd5b505050506040513d602081101561269657600080fd5b50519150600082111561285d576000809054906101000a9004600160a060020a0316600160a060020a0316634e94c8296040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156126f557600080fd5b505af1158015612709573d6000803e3d6000fd5b505050506040513d602081101561271f57600080fd5b5051604080517fec238994000000000000000000000000000000000000000000000000000000008152600160a060020a0386811660048301523360248301523060448301526064820186905291519293509083169163ec238994916084808201926020929091908290030181600087803b15801561279c57600080fd5b505af11580156127b0573d6000803e3d6000fd5b505050506040513d60208110156127c657600080fd5b5050604080517f1baffe38000000000000000000000000000000000000000000000000000000008152336004820152602481018490529051600160a060020a03851691631baffe389160448083019260209291908290030181600087803b15801561283057600080fd5b505af1158015612844573d6000803e3d6000fd5b505050506040513d602081101561285a57600080fd5b50505b60019350505050905600870c426d000000000000000000000000000000000000000000000000000000004e94c829000000000000000000000000000000000000000000000000000000008cfb8f2100000000000000000000000000000000000000000000000000000000a165627a7a7230582093f5ef10ef713c3762f159f70814e2824848c48c9615ea30770abfa89c43163e0029`

// DeployCompleteSets deploys a new Ethereum contract, binding an instance of CompleteSets to it.
func DeployCompleteSets(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CompleteSets, error) {
	parsed, err := abi.JSON(strings.NewReader(CompleteSetsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(CompleteSetsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CompleteSets{CompleteSetsCaller: CompleteSetsCaller{contract: contract}, CompleteSetsTransactor: CompleteSetsTransactor{contract: contract}, CompleteSetsFilterer: CompleteSetsFilterer{contract: contract}}, nil
}

// CompleteSets is an auto generated Go binding around an Ethereum contract.
type CompleteSets struct {
	CompleteSetsCaller     // Read-only binding to the contract
	CompleteSetsTransactor // Write-only binding to the contract
	CompleteSetsFilterer   // Log filterer for contract events
}

// CompleteSetsCaller is an auto generated read-only Go binding around an Ethereum contract.
type CompleteSetsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompleteSetsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CompleteSetsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompleteSetsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CompleteSetsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CompleteSetsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CompleteSetsSession struct {
	Contract     *CompleteSets     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CompleteSetsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CompleteSetsCallerSession struct {
	Contract *CompleteSetsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// CompleteSetsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CompleteSetsTransactorSession struct {
	Contract     *CompleteSetsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// CompleteSetsRaw is an auto generated low-level Go binding around an Ethereum contract.
type CompleteSetsRaw struct {
	Contract *CompleteSets // Generic contract binding to access the raw methods on
}

// CompleteSetsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CompleteSetsCallerRaw struct {
	Contract *CompleteSetsCaller // Generic read-only contract binding to access the raw methods on
}

// CompleteSetsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CompleteSetsTransactorRaw struct {
	Contract *CompleteSetsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCompleteSets creates a new instance of CompleteSets, bound to a specific deployed contract.
func NewCompleteSets(address common.Address, backend bind.ContractBackend) (*CompleteSets, error) {
	contract, err := bindCompleteSets(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CompleteSets{CompleteSetsCaller: CompleteSetsCaller{contract: contract}, CompleteSetsTransactor: CompleteSetsTransactor{contract: contract}, CompleteSetsFilterer: CompleteSetsFilterer{contract: contract}}, nil
}

// NewCompleteSetsCaller creates a new read-only instance of CompleteSets, bound to a specific deployed contract.
func NewCompleteSetsCaller(address common.Address, caller bind.ContractCaller) (*CompleteSetsCaller, error) {
	contract, err := bindCompleteSets(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CompleteSetsCaller{contract: contract}, nil
}

// NewCompleteSetsTransactor creates a new write-only instance of CompleteSets, bound to a specific deployed contract.
func NewCompleteSetsTransactor(address common.Address, transactor bind.ContractTransactor) (*CompleteSetsTransactor, error) {
	contract, err := bindCompleteSets(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CompleteSetsTransactor{contract: contract}, nil
}

// NewCompleteSetsFilterer creates a new log filterer instance of CompleteSets, bound to a specific deployed contract.
func NewCompleteSetsFilterer(address common.Address, filterer bind.ContractFilterer) (*CompleteSetsFilterer, error) {
	contract, err := bindCompleteSets(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CompleteSetsFilterer{contract: contract}, nil
}

// bindCompleteSets binds a generic wrapper to an already deployed contract.
func bindCompleteSets(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CompleteSetsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CompleteSets *CompleteSetsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CompleteSets.Contract.CompleteSetsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CompleteSets *CompleteSetsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompleteSets.Contract.CompleteSetsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CompleteSets *CompleteSetsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CompleteSets.Contract.CompleteSetsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CompleteSets *CompleteSetsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _CompleteSets.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CompleteSets *CompleteSetsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CompleteSets.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CompleteSets *CompleteSetsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CompleteSets.Contract.contract.Transact(opts, method, params...)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_CompleteSets *CompleteSetsCaller) GetController(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _CompleteSets.contract.Call(opts, out, "getController")
	return *ret0, err
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_CompleteSets *CompleteSetsSession) GetController() (common.Address, error) {
	return _CompleteSets.Contract.GetController(&_CompleteSets.CallOpts)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_CompleteSets *CompleteSetsCallerSession) GetController() (common.Address, error) {
	return _CompleteSets.Contract.GetController(&_CompleteSets.CallOpts)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) BuyCompleteSets(opts *bind.TransactOpts, _sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "buyCompleteSets", _sender, _market, _amount)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsSession) BuyCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.BuyCompleteSets(&_CompleteSets.TransactOpts, _sender, _market, _amount)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) BuyCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.BuyCompleteSets(&_CompleteSets.TransactOpts, _sender, _market, _amount)
}

// PublicBuyCompleteSets is a paid mutator transaction binding the contract method 0xabb60c80.
//
// Solidity: function publicBuyCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) PublicBuyCompleteSets(opts *bind.TransactOpts, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "publicBuyCompleteSets", _market, _amount)
}

// PublicBuyCompleteSets is a paid mutator transaction binding the contract method 0xabb60c80.
//
// Solidity: function publicBuyCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsSession) PublicBuyCompleteSets(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicBuyCompleteSets(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicBuyCompleteSets is a paid mutator transaction binding the contract method 0xabb60c80.
//
// Solidity: function publicBuyCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) PublicBuyCompleteSets(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicBuyCompleteSets(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicBuyCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x2054279e.
//
// Solidity: function publicBuyCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) PublicBuyCompleteSetsWithCash(opts *bind.TransactOpts, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "publicBuyCompleteSetsWithCash", _market, _amount)
}

// PublicBuyCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x2054279e.
//
// Solidity: function publicBuyCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsSession) PublicBuyCompleteSetsWithCash(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicBuyCompleteSetsWithCash(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicBuyCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x2054279e.
//
// Solidity: function publicBuyCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) PublicBuyCompleteSetsWithCash(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicBuyCompleteSetsWithCash(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicSellCompleteSets is a paid mutator transaction binding the contract method 0xad16158e.
//
// Solidity: function publicSellCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) PublicSellCompleteSets(opts *bind.TransactOpts, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "publicSellCompleteSets", _market, _amount)
}

// PublicSellCompleteSets is a paid mutator transaction binding the contract method 0xad16158e.
//
// Solidity: function publicSellCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsSession) PublicSellCompleteSets(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicSellCompleteSets(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicSellCompleteSets is a paid mutator transaction binding the contract method 0xad16158e.
//
// Solidity: function publicSellCompleteSets(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) PublicSellCompleteSets(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicSellCompleteSets(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicSellCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x7d8ec2cf.
//
// Solidity: function publicSellCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) PublicSellCompleteSetsWithCash(opts *bind.TransactOpts, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "publicSellCompleteSetsWithCash", _market, _amount)
}

// PublicSellCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x7d8ec2cf.
//
// Solidity: function publicSellCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsSession) PublicSellCompleteSetsWithCash(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicSellCompleteSetsWithCash(&_CompleteSets.TransactOpts, _market, _amount)
}

// PublicSellCompleteSetsWithCash is a paid mutator transaction binding the contract method 0x7d8ec2cf.
//
// Solidity: function publicSellCompleteSetsWithCash(_market address, _amount uint256) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) PublicSellCompleteSetsWithCash(_market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.PublicSellCompleteSetsWithCash(&_CompleteSets.TransactOpts, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(_creatorFee uint256, _reportingFee uint256)
func (_CompleteSets *CompleteSetsTransactor) SellCompleteSets(opts *bind.TransactOpts, _sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "sellCompleteSets", _sender, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(_creatorFee uint256, _reportingFee uint256)
func (_CompleteSets *CompleteSetsSession) SellCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.SellCompleteSets(&_CompleteSets.TransactOpts, _sender, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(_creatorFee uint256, _reportingFee uint256)
func (_CompleteSets *CompleteSetsTransactorSession) SellCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _CompleteSets.Contract.SellCompleteSets(&_CompleteSets.TransactOpts, _sender, _market, _amount)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_CompleteSets *CompleteSetsTransactor) SetController(opts *bind.TransactOpts, _controller common.Address) (*types.Transaction, error) {
	return _CompleteSets.contract.Transact(opts, "setController", _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_CompleteSets *CompleteSetsSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _CompleteSets.Contract.SetController(&_CompleteSets.TransactOpts, _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_CompleteSets *CompleteSetsTransactorSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _CompleteSets.Contract.SetController(&_CompleteSets.TransactOpts, _controller)
}

// ICompleteSetsABI is the input ABI used to generate the binding from.
const ICompleteSetsABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_market\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCompleteSets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ICompleteSetsBin is the compiled bytecode used for deploying new contracts.
const ICompleteSetsBin = `0x`

// DeployICompleteSets deploys a new Ethereum contract, binding an instance of ICompleteSets to it.
func DeployICompleteSets(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ICompleteSets, error) {
	parsed, err := abi.JSON(strings.NewReader(ICompleteSetsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ICompleteSetsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ICompleteSets{ICompleteSetsCaller: ICompleteSetsCaller{contract: contract}, ICompleteSetsTransactor: ICompleteSetsTransactor{contract: contract}, ICompleteSetsFilterer: ICompleteSetsFilterer{contract: contract}}, nil
}

// ICompleteSets is an auto generated Go binding around an Ethereum contract.
type ICompleteSets struct {
	ICompleteSetsCaller     // Read-only binding to the contract
	ICompleteSetsTransactor // Write-only binding to the contract
	ICompleteSetsFilterer   // Log filterer for contract events
}

// ICompleteSetsCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICompleteSetsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICompleteSetsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICompleteSetsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICompleteSetsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICompleteSetsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICompleteSetsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICompleteSetsSession struct {
	Contract     *ICompleteSets    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICompleteSetsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICompleteSetsCallerSession struct {
	Contract *ICompleteSetsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ICompleteSetsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICompleteSetsTransactorSession struct {
	Contract     *ICompleteSetsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ICompleteSetsRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICompleteSetsRaw struct {
	Contract *ICompleteSets // Generic contract binding to access the raw methods on
}

// ICompleteSetsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICompleteSetsCallerRaw struct {
	Contract *ICompleteSetsCaller // Generic read-only contract binding to access the raw methods on
}

// ICompleteSetsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICompleteSetsTransactorRaw struct {
	Contract *ICompleteSetsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICompleteSets creates a new instance of ICompleteSets, bound to a specific deployed contract.
func NewICompleteSets(address common.Address, backend bind.ContractBackend) (*ICompleteSets, error) {
	contract, err := bindICompleteSets(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICompleteSets{ICompleteSetsCaller: ICompleteSetsCaller{contract: contract}, ICompleteSetsTransactor: ICompleteSetsTransactor{contract: contract}, ICompleteSetsFilterer: ICompleteSetsFilterer{contract: contract}}, nil
}

// NewICompleteSetsCaller creates a new read-only instance of ICompleteSets, bound to a specific deployed contract.
func NewICompleteSetsCaller(address common.Address, caller bind.ContractCaller) (*ICompleteSetsCaller, error) {
	contract, err := bindICompleteSets(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICompleteSetsCaller{contract: contract}, nil
}

// NewICompleteSetsTransactor creates a new write-only instance of ICompleteSets, bound to a specific deployed contract.
func NewICompleteSetsTransactor(address common.Address, transactor bind.ContractTransactor) (*ICompleteSetsTransactor, error) {
	contract, err := bindICompleteSets(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICompleteSetsTransactor{contract: contract}, nil
}

// NewICompleteSetsFilterer creates a new log filterer instance of ICompleteSets, bound to a specific deployed contract.
func NewICompleteSetsFilterer(address common.Address, filterer bind.ContractFilterer) (*ICompleteSetsFilterer, error) {
	contract, err := bindICompleteSets(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICompleteSetsFilterer{contract: contract}, nil
}

// bindICompleteSets binds a generic wrapper to an already deployed contract.
func bindICompleteSets(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ICompleteSetsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICompleteSets *ICompleteSetsRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ICompleteSets.Contract.ICompleteSetsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICompleteSets *ICompleteSetsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICompleteSets.Contract.ICompleteSetsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICompleteSets *ICompleteSetsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICompleteSets.Contract.ICompleteSetsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICompleteSets *ICompleteSetsCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ICompleteSets.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICompleteSets *ICompleteSetsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICompleteSets.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICompleteSets *ICompleteSetsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICompleteSets.Contract.contract.Transact(opts, method, params...)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_ICompleteSets *ICompleteSetsTransactor) BuyCompleteSets(opts *bind.TransactOpts, _sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.contract.Transact(opts, "buyCompleteSets", _sender, _market, _amount)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_ICompleteSets *ICompleteSetsSession) BuyCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.Contract.BuyCompleteSets(&_ICompleteSets.TransactOpts, _sender, _market, _amount)
}

// BuyCompleteSets is a paid mutator transaction binding the contract method 0xaa48db20.
//
// Solidity: function buyCompleteSets(_sender address, _market address, _amount uint256) returns(bool)
func (_ICompleteSets *ICompleteSetsTransactorSession) BuyCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.Contract.BuyCompleteSets(&_ICompleteSets.TransactOpts, _sender, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(uint256, uint256)
func (_ICompleteSets *ICompleteSetsTransactor) SellCompleteSets(opts *bind.TransactOpts, _sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.contract.Transact(opts, "sellCompleteSets", _sender, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(uint256, uint256)
func (_ICompleteSets *ICompleteSetsSession) SellCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.Contract.SellCompleteSets(&_ICompleteSets.TransactOpts, _sender, _market, _amount)
}

// SellCompleteSets is a paid mutator transaction binding the contract method 0x2bb66c48.
//
// Solidity: function sellCompleteSets(_sender address, _market address, _amount uint256) returns(uint256, uint256)
func (_ICompleteSets *ICompleteSetsTransactorSession) SellCompleteSets(_sender common.Address, _market common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _ICompleteSets.Contract.SellCompleteSets(&_ICompleteSets.TransactOpts, _sender, _market, _amount)
}
