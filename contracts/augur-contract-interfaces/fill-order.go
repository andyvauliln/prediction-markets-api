package augur-contract-interfaces

import (
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// FillOrderABI is the input ABI used to generate the binding from.
const FillOrderABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_filler\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_amountFillerWants\",\"type\":\"uint256\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"fillOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_amountFillerWants\",\"type\":\"uint256\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicFillOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// FillOrderBin is the compiled bytecode used for deploying new contracts.
const FillOrderBin = ``

// DeployFillOrder deploys a new Ethereum contract, binding an instance of FillOrder to it.
func DeployFillOrder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FillOrder, error) {
	parsed, err := abi.JSON(strings.NewReader(FillOrderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FillOrderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FillOrder{FillOrderCaller: FillOrderCaller{contract: contract}, FillOrderTransactor: FillOrderTransactor{contract: contract}, FillOrderFilterer: FillOrderFilterer{contract: contract}}, nil
}

// FillOrder is an auto generated Go binding around an Ethereum contract.
type FillOrder struct {
	FillOrderCaller     // Read-only binding to the contract
	FillOrderTransactor // Write-only binding to the contract
	FillOrderFilterer   // Log filterer for contract events
}

// FillOrderCaller is an auto generated read-only Go binding around an Ethereum contract.
type FillOrderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FillOrderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FillOrderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FillOrderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FillOrderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FillOrderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FillOrderSession struct {
	Contract     *FillOrder        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FillOrderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FillOrderCallerSession struct {
	Contract *FillOrderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// FillOrderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FillOrderTransactorSession struct {
	Contract     *FillOrderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// FillOrderRaw is an auto generated low-level Go binding around an Ethereum contract.
type FillOrderRaw struct {
	Contract *FillOrder // Generic contract binding to access the raw methods on
}

// FillOrderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FillOrderCallerRaw struct {
	Contract *FillOrderCaller // Generic read-only contract binding to access the raw methods on
}

// FillOrderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FillOrderTransactorRaw struct {
	Contract *FillOrderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFillOrder creates a new instance of FillOrder, bound to a specific deployed contract.
func NewFillOrder(address common.Address, backend bind.ContractBackend) (*FillOrder, error) {
	contract, err := bindFillOrder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FillOrder{FillOrderCaller: FillOrderCaller{contract: contract}, FillOrderTransactor: FillOrderTransactor{contract: contract}, FillOrderFilterer: FillOrderFilterer{contract: contract}}, nil
}

// NewFillOrderCaller creates a new read-only instance of FillOrder, bound to a specific deployed contract.
func NewFillOrderCaller(address common.Address, caller bind.ContractCaller) (*FillOrderCaller, error) {
	contract, err := bindFillOrder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FillOrderCaller{contract: contract}, nil
}

// NewFillOrderTransactor creates a new write-only instance of FillOrder, bound to a specific deployed contract.
func NewFillOrderTransactor(address common.Address, transactor bind.ContractTransactor) (*FillOrderTransactor, error) {
	contract, err := bindFillOrder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FillOrderTransactor{contract: contract}, nil
}

// NewFillOrderFilterer creates a new log filterer instance of FillOrder, bound to a specific deployed contract.
func NewFillOrderFilterer(address common.Address, filterer bind.ContractFilterer) (*FillOrderFilterer, error) {
	contract, err := bindFillOrder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FillOrderFilterer{contract: contract}, nil
}

// bindFillOrder binds a generic wrapper to an already deployed contract.
func bindFillOrder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FillOrderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FillOrder *FillOrderRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FillOrder.Contract.FillOrderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FillOrder *FillOrderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FillOrder.Contract.FillOrderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FillOrder *FillOrderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FillOrder.Contract.FillOrderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FillOrder *FillOrderCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _FillOrder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FillOrder *FillOrderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FillOrder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FillOrder *FillOrderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FillOrder.Contract.contract.Transact(opts, method, params...)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_FillOrder *FillOrderCaller) GetController(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _FillOrder.contract.Call(opts, out, "getController")
	return *ret0, err
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_FillOrder *FillOrderSession) GetController() (common.Address, error) {
	return _FillOrder.Contract.GetController(&_FillOrder.CallOpts)
}

// GetController is a free data retrieval call binding the contract method 0x3018205f.
//
// Solidity: function getController() constant returns(address)
func (_FillOrder *FillOrderCallerSession) GetController() (common.Address, error) {
	return _FillOrder.Contract.GetController(&_FillOrder.CallOpts)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderTransactor) FillOrder(opts *bind.TransactOpts, _filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.contract.Transact(opts, "fillOrder", _filler, _orderId, _amountFillerWants, _tradeGroupId)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderSession) FillOrder(_filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.Contract.FillOrder(&_FillOrder.TransactOpts, _filler, _orderId, _amountFillerWants, _tradeGroupId)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderTransactorSession) FillOrder(_filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.Contract.FillOrder(&_FillOrder.TransactOpts, _filler, _orderId, _amountFillerWants, _tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderTransactor) PublicFillOrder(opts *bind.TransactOpts, _orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.contract.Transact(opts, "publicFillOrder", _orderId, _amountFillerWants, _tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderSession) PublicFillOrder(_orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.Contract.PublicFillOrder(&_FillOrder.TransactOpts, _orderId, _amountFillerWants, _tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_FillOrder *FillOrderTransactorSession) PublicFillOrder(_orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _FillOrder.Contract.PublicFillOrder(&_FillOrder.TransactOpts, _orderId, _amountFillerWants, _tradeGroupId)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_FillOrder *FillOrderTransactor) SetController(opts *bind.TransactOpts, _controller common.Address) (*types.Transaction, error) {
	return _FillOrder.contract.Transact(opts, "setController", _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_FillOrder *FillOrderSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _FillOrder.Contract.SetController(&_FillOrder.TransactOpts, _controller)
}

// SetController is a paid mutator transaction binding the contract method 0x92eefe9b.
//
// Solidity: function setController(_controller address) returns(bool)
func (_FillOrder *FillOrderTransactorSession) SetController(_controller common.Address) (*types.Transaction, error) {
	return _FillOrder.Contract.SetController(&_FillOrder.TransactOpts, _controller)
}

// IFillOrderABI is the input ABI used to generate the binding from.
const IFillOrderABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_filler\",\"type\":\"address\"},{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_amountFillerWants\",\"type\":\"uint256\"},{\"name\":\"tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"fillOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"bytes32\"},{\"name\":\"_amountFillerWants\",\"type\":\"uint256\"},{\"name\":\"_tradeGroupId\",\"type\":\"bytes32\"}],\"name\":\"publicFillOrder\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]"

// IFillOrderBin is the compiled bytecode used for deploying new contracts.
const IFillOrderBin = `0x`

// DeployIFillOrder deploys a new Ethereum contract, binding an instance of IFillOrder to it.
func DeployIFillOrder(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *IFillOrder, error) {
	parsed, err := abi.JSON(strings.NewReader(IFillOrderABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IFillOrderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IFillOrder{IFillOrderCaller: IFillOrderCaller{contract: contract}, IFillOrderTransactor: IFillOrderTransactor{contract: contract}, IFillOrderFilterer: IFillOrderFilterer{contract: contract}}, nil
}

// IFillOrder is an auto generated Go binding around an Ethereum contract.
type IFillOrder struct {
	IFillOrderCaller     // Read-only binding to the contract
	IFillOrderTransactor // Write-only binding to the contract
	IFillOrderFilterer   // Log filterer for contract events
}

// IFillOrderCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFillOrderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFillOrderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFillOrderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFillOrderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFillOrderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFillOrderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFillOrderSession struct {
	Contract     *IFillOrder       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFillOrderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFillOrderCallerSession struct {
	Contract *IFillOrderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IFillOrderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFillOrderTransactorSession struct {
	Contract     *IFillOrderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IFillOrderRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFillOrderRaw struct {
	Contract *IFillOrder // Generic contract binding to access the raw methods on
}

// IFillOrderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFillOrderCallerRaw struct {
	Contract *IFillOrderCaller // Generic read-only contract binding to access the raw methods on
}

// IFillOrderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFillOrderTransactorRaw struct {
	Contract *IFillOrderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFillOrder creates a new instance of IFillOrder, bound to a specific deployed contract.
func NewIFillOrder(address common.Address, backend bind.ContractBackend) (*IFillOrder, error) {
	contract, err := bindIFillOrder(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFillOrder{IFillOrderCaller: IFillOrderCaller{contract: contract}, IFillOrderTransactor: IFillOrderTransactor{contract: contract}, IFillOrderFilterer: IFillOrderFilterer{contract: contract}}, nil
}

// NewIFillOrderCaller creates a new read-only instance of IFillOrder, bound to a specific deployed contract.
func NewIFillOrderCaller(address common.Address, caller bind.ContractCaller) (*IFillOrderCaller, error) {
	contract, err := bindIFillOrder(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFillOrderCaller{contract: contract}, nil
}

// NewIFillOrderTransactor creates a new write-only instance of IFillOrder, bound to a specific deployed contract.
func NewIFillOrderTransactor(address common.Address, transactor bind.ContractTransactor) (*IFillOrderTransactor, error) {
	contract, err := bindIFillOrder(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFillOrderTransactor{contract: contract}, nil
}

// NewIFillOrderFilterer creates a new log filterer instance of IFillOrder, bound to a specific deployed contract.
func NewIFillOrderFilterer(address common.Address, filterer bind.ContractFilterer) (*IFillOrderFilterer, error) {
	contract, err := bindIFillOrder(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFillOrderFilterer{contract: contract}, nil
}

// bindIFillOrder binds a generic wrapper to an already deployed contract.
func bindIFillOrder(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IFillOrderABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFillOrder *IFillOrderRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFillOrder.Contract.IFillOrderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFillOrder *IFillOrderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFillOrder.Contract.IFillOrderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFillOrder *IFillOrderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFillOrder.Contract.IFillOrderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFillOrder *IFillOrderCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IFillOrder.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFillOrder *IFillOrderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFillOrder.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFillOrder *IFillOrderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFillOrder.Contract.contract.Transact(opts, method, params...)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderTransactor) FillOrder(opts *bind.TransactOpts, _filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.contract.Transact(opts, "fillOrder", _filler, _orderId, _amountFillerWants, tradeGroupId)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderSession) FillOrder(_filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.Contract.FillOrder(&_IFillOrder.TransactOpts, _filler, _orderId, _amountFillerWants, tradeGroupId)
}

// FillOrder is a paid mutator transaction binding the contract method 0x1faf8995.
//
// Solidity: function fillOrder(_filler address, _orderId bytes32, _amountFillerWants uint256, tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderTransactorSession) FillOrder(_filler common.Address, _orderId [32]byte, _amountFillerWants *big.Int, tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.Contract.FillOrder(&_IFillOrder.TransactOpts, _filler, _orderId, _amountFillerWants, tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderTransactor) PublicFillOrder(opts *bind.TransactOpts, _orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.contract.Transact(opts, "publicFillOrder", _orderId, _amountFillerWants, _tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderSession) PublicFillOrder(_orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.Contract.PublicFillOrder(&_IFillOrder.TransactOpts, _orderId, _amountFillerWants, _tradeGroupId)
}

// PublicFillOrder is a paid mutator transaction binding the contract method 0xe233ee0d.
//
// Solidity: function publicFillOrder(_orderId bytes32, _amountFillerWants uint256, _tradeGroupId bytes32) returns(uint256)
func (_IFillOrder *IFillOrderTransactorSession) PublicFillOrder(_orderId [32]byte, _amountFillerWants *big.Int, _tradeGroupId [32]byte) (*types.Transaction, error) {
	return _IFillOrder.Contract.PublicFillOrder(&_IFillOrder.TransactOpts, _orderId, _amountFillerWants, _tradeGroupId)
}
